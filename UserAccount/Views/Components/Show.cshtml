@using Zidium.Core.AccountsDb
@using Zidium.Core.Common.Helpers
@using Zidium.Api.Dto
@using Zidium.UserAccount.Helpers
@using Zidium.UserAccount.Models
@using Zidium.UserAccount.Models.Controls

@model ComponentShowModel

@{
    ViewBag.Title = Model.Component.DisplayName + " (" + Model.Component.SystemName + ") - Просмотр компонента";
    ViewBag.ActiveMenuItems = "Components";
}

@section Styles
{
    <link href="~/Content/css/components/show.css" rel="stylesheet" />

    <style>
        #error-stat-table td {
            padding: 5px 20px;
            white-space: nowrap;
            border: 0px solid #ccc;
            text-align: center;
        }

        #errors-table-header {
            font-weight: bold;
        }
    </style>
    <style>
        .enable-btn {
            width: 16px;
            height: 16px;
            display: inline-block;
        }
        span.badge.badge-importance-@EventImportance.Alarm {
            background-color: white;
            border-color: @GuiHelper.StrongRedFgColor;
            border-width: 1px;
            border-style: solid;
            border-radius: 12px;
        }

        span.badge.badge-importance-@EventImportance.Alarm > a {
            color: @GuiHelper.StrongRedFgColor;
        }

        span.badge.active.badge-importance-@EventImportance.Alarm {
            background-color: @GuiHelper.StrongRedBgColor;
        }

        span.badge.active.badge-importance-@EventImportance.Alarm > a {
            color: white;
        }
    </style>

    <style>
        span.badge.badge-importance-@EventImportance.Warning {
            background-color: white;
            border-color: @GuiHelper.StrongYellowFgColor;
            border-width: 1px;
            border-style: solid;
            border-radius: 12px;
        }

        span.badge.badge-importance-@EventImportance.Warning > a {
            color: @GuiHelper.StrongYellowFgColor;
        }

        span.badge.active.badge-importance-@EventImportance.Warning {
            background-color: @GuiHelper.StrongYellowBgColor;
        }

        span.badge.active.badge-importance-@EventImportance.Warning > a {
            color: white;
        }
    </style>

    <style>
        span.badge.badge-importance-@EventImportance.Success {
            background-color: white;
            border-color: @GuiHelper.StrongGreenFgColor;
            border-width: 1px;
            border-style: solid;
            border-radius: 12px;
        }

        span.badge.badge-importance-@EventImportance.Success > a {
            color: @GuiHelper.StrongGreenFgColor;
        }

        span.badge.active.badge-importance-@EventImportance.Success {
            background-color: @GuiHelper.StrongGreenBgColor;
        }

        span.badge.active.badge-importance-@EventImportance.Success > a {
            color: white;
        }
    </style>

    <style>
        span.badge.badge-importance-@EventImportance.Unknown {
            background-color: white;
            border-color: @GuiHelper.StrongGrayFgColor;
            border-width: 1px;
            border-style: solid;
            border-radius: 12px;
        }

        span.badge.badge-importance-@EventImportance.Unknown > a {
            color: @GuiHelper.StrongGrayFgColor;
        }

        span.badge.active.badge-importance-@EventImportance.Unknown {
            background-color: @GuiHelper.StrongGrayBgColor;
        }

        span.badge.active.badge-importance-@EventImportance.Unknown > a {
            color: white;
        }
    </style>
}

<div>

    <p class="submenu-title" style="margin-top: 0">Страница компонента</p>
    <div class="zi-bread-crumbs">
        @Html.Partial("~/Views/Controls/ComponentBreadCrumbs.cshtml", Model.ComponentBreadCrumbs)
    </div>
    <hr class="submenu" />

    @if (Model.Component.IsDeleted)
    {
        <div class="alert alert-danger">Этот компонент удалён</div>
    }

    <div style="height: 5px;"></div>

    <div class="pull-right">
        <table id="statTable">
            <tr>
                <th class="text-nowrap">
                    <a href='@Url.Action("Index", "UnitTests", new { componentId = Model.Component.Id })'>Проверки</a>
                </th>
                <td>
                    @Html.ColorCircleWithNumber(Model.UnittestsMiniStatus.Alarm, ImportanceColor.Red, Model.UnittestsMiniStatus.AlarmUrl)
                </td>
                <td>
                    @Html.ColorCircleWithNumber(Model.UnittestsMiniStatus.Warning, ImportanceColor.Yellow, Model.UnittestsMiniStatus.WarningUrl)
                </td>
                <td>
                    @Html.ColorCircleWithNumber(Model.UnittestsMiniStatus.Success, ImportanceColor.Green, Model.UnittestsMiniStatus.SuccessUrl)
                </td>
                <td>
                    @Html.ColorCircleWithNumber(Model.UnittestsMiniStatus.Unknown, ImportanceColor.Gray, Model.UnittestsMiniStatus.UnknownUrl)
                </td>
            </tr>

            <tr>
                <th class="text-nowrap">
                    <a href='@Url.Action("Index", "Events", new { ComponentId = Model.Component.Id, FromDate = GuiHelper.GetUrlDateTimeString(DateTime.Now) })'>События</a>
                </th>
                <td>
                    @Html.ColorCircleWithNumber(Model.EventsMiniStatus.Alarm, ImportanceColor.Red, Model.EventsMiniStatus.AlarmUrl)
                </td>
                <td>
                    @Html.ColorCircleWithNumber(Model.EventsMiniStatus.Warning, ImportanceColor.Yellow, Model.EventsMiniStatus.WarningUrl)
                </td>
                <td>
                    @Html.ColorCircleWithNumber(Model.EventsMiniStatus.Success, ImportanceColor.Green, Model.EventsMiniStatus.SuccessUrl)
                </td>
                <td>
                    @Html.ColorCircleWithNumber(Model.EventsMiniStatus.Unknown, ImportanceColor.Gray, Model.EventsMiniStatus.UnknownUrl)
                </td>
            </tr>

            <tr>
                <th class="text-nowrap">
                    <a href='@Url.Action("Values", "Metrics", new { componentId = Model.Component.Id })'>Метрики</a>
                </th>
                <td>
                    @Html.ColorCircleWithNumber(Model.MetricsMiniStatus.Alarm, ImportanceColor.Red, Model.MetricsMiniStatus.AlarmUrl)
                </td>
                <td>
                    @Html.ColorCircleWithNumber(Model.MetricsMiniStatus.Warning, ImportanceColor.Yellow, Model.MetricsMiniStatus.WarningUrl)
                </td>
                <td>
                    @Html.ColorCircleWithNumber(Model.MetricsMiniStatus.Success, ImportanceColor.Green, Model.MetricsMiniStatus.SuccessUrl)
                </td>
                <td>
                    @Html.ColorCircleWithNumber(Model.MetricsMiniStatus.Unknown, ImportanceColor.Gray, Model.MetricsMiniStatus.UnknownUrl)
                </td>
            </tr>

            <tr>
                <th class="text-nowrap">
                    <a href='@Url.Action("List", "Components", new { parentComponentId = Model.Component.Id })'>Дети</a>
                </th>
                <td>
                    @Html.ColorCircleWithNumber(Model.ChildsMiniStatus.Alarm, ImportanceColor.Red, Model.ChildsMiniStatus.AlarmUrl)
                </td>
                <td>
                    @Html.ColorCircleWithNumber(Model.ChildsMiniStatus.Warning, ImportanceColor.Yellow, Model.ChildsMiniStatus.WarningUrl)
                </td>
                <td>
                    @Html.ColorCircleWithNumber(Model.ChildsMiniStatus.Success, ImportanceColor.Green, Model.ChildsMiniStatus.SuccessUrl)
                </td>
                <td>
                    @Html.ColorCircleWithNumber(Model.ChildsMiniStatus.Unknown, ImportanceColor.Gray, Model.ChildsMiniStatus.UnknownUrl)
                </td>
            </tr>

        </table>
    </div>

    <div>
        <span class="padding-right-15">
            @Html.MonitoringStatusLabel(Model.ExternalState.Status, Model.ExternalState.StatusEventId)
        </span>
        <span class='@GuiHelper.GetComponentStatusTextCssClass(Model.ExternalState.Status) big-font'>
            @Model.Component.DisplayName
        </span>

        <p style="margin-top: 10px;">
            <span class="simple-text-header">Статус длится</span>
            <span class="simple-text-value">@TimeSpanHelper.Get2UnitsString(Model.ExternalState.GetDuration(Model.Now))</span>,
            <span class="simple-text-header">начался</span>
            <span class="simple-text-value">@GuiHelper.GetDateTimeString(Model.ExternalState.StartDate)</span>
            @if (UserHelper.CurrentUser(Context).CanEditCommonData())
            {
                <a id="recalc-status-link" class="post-link" href='@Url.Action("RecalcStatus", new { id = Model.Component.Id })'><span class="glyphicon glyphicon-refresh"></span>Обновить</a>
            }
        </p>
        @if (Model.ExternalState.Status == MonitoringStatus.Disabled)
        {

            if (Model.Component.DisableToDate == null)
            {
                <p><span class="simple-text-header">Выключен на неопределенный срок</span></p>
            }
            else
            {
                <p>
                    <span class="simple-text-header">Выключен до </span>
                    <span class="simple-text-value">@GuiHelper.GetDateTimeString(Model.Component.DisableToDate)</span>
                </p>
            }
            if (string.IsNullOrEmpty(Model.Component.DisableComment) == false)
            {
                <p><span class="simple-text-header">@Model.Component.DisableComment</span></p>
            }
        }

        @if (UserHelper.CurrentUser(Context).CanEditCommonData())
        {
            if (!Model.Component.IsRoot())
            {
                @Html.ActionLink("Настроить", "Edit", new { id = Model.Component.Id }, new { @class = "btn btn-default" })
            }
            if (!Model.Component.Enable)
            {
                @Html.ActionLink("Включить", "Enable", new { id = Model.Component.Id }, new { @class = "btn btn-default zi-ajax-link", id = "enableComponentBtn" })
            }
            else
            {
                <a href='@Url.Action("Disable", new { id = Model.Component.Id })'
                   onclick="ModalBtnClick(this, event);"
                   class="btn btn-default"
                   title="Выключить компонент">Выключить</a>
            }
            @Html.ActionLink("Добавить событие", "Add", "Events", new { componentId = Model.Component.Id, returnUrl = Url.Action("Show", new { id = Model.Component.Id }) }, new { @class = "btn btn-default", id = "add-event-link" })
        }
    </div>

</div>
<hr style="clear: both;" />

<div id="div-component-timeline">
    <table id="timelineTable" class="full-width">
        <thead>
            <tr id="timelineTable-row-history">
                <th class="text-nowrap normal" colspan="2" id="th-history-label">
                    <span id="history-label">История за</span>
                </th>
                <td id="timelineTable-row-history-buttons" class="full-width">

                    <div class="btn-group space-right" data-toggle="buttons">
                        <label class="btn btn-default" id="btn-stats-hour">
                            <input type="radio" autocomplete="off">
                            Час
                        </label>
                        <label class="btn btn-default active" id="btn-stats-day">
                            <input type="radio" autocomplete="off" checked>
                            День
                        </label>
                        <label class="btn btn-default" id="btn-stats-week">
                            <input type="radio" autocomplete="off">
                            Неделя
                        </label>
                        <label class="btn btn-default" id="btn-stats-month">
                            <input type="radio" autocomplete="off">
                            Месяц
                        </label>
                    </div>

                    <span id="timelines-loader" class="collapse">
                        <img src="~/Content/Icons/ajax-loader-white.gif" />
                    </span>
                </td>
            </tr>
        </thead>

        <tbody id="timelines-table-body">
            <tr>
                <td colspan="3" class="text-center vertical-middle">
                    <img src="~/Content/Icons/ajax-loader.gif" />
                </td>
            </tr>
        </tbody>

    </table>
</div>
<hr />

<div class="row">
    <div class="col-sm-6">
        <div>
            <p><span class="simple-text-header">Id: </span><span class="simple-text-value">@Model.Component.Id</span></p>
            <p><span class="simple-text-header">Системное имя: </span><span class="simple-text-value">@Model.Component.SystemName</span></p>
            <p><span class="simple-text-header">Версия: </span><span class="simple-text-value">@(Model.Component.Version ?? "не указана")</span></p>
        </div>
    </div>
    <div class="col-sm-6">
        <div>
            <p>
                <span class="simple-text-header">Родитель: </span>
                @if (Model.Parent == null)
                {
                    <span class="simple-text-value">нет</span>
                }
                else
                {
                    @Html.ActionLink(Model.Parent.DisplayName, "Show", "Components", new { id = Model.Parent.Id }, null)
                }
            </p>
            <p>
                <span class="simple-text-header">Тип: </span>
                @Html.ActionLink(Model.ComponentType.DisplayName, "Show", "ComponentTypes", new { id = Model.ComponentType.Id }, null)
            </p>
            <p>
                <span class="simple-text-header">Статус: </span>
                @if (Model.Component.IsDeleted)
                {
                    <span class="badge text-strongbgred">Удален</span>
                }
                else if (!Model.Component.Enable)
                {
                    <span class="badge text-strongbgred">Выключен</span>
                }
                else
                {
                    <span class="simple-text-value">Включен</span>
                }
            </p>
            <p class="no-bottom-margin">
                <span class="simple-text-header">Дата создания: </span>
                <span class="simple-text-value">@GuiHelper.GetDateTimeString(Model.Component.CreatedDate)</span>
            </p>
        </div>
    </div>
</div>

@if (Model.Properties.Length > 0)
{
    <p>Дополнительные свойства:</p>
    <div id="componentExtProperties" class="top10px">
        @Html.ExtentionPropertiesTable(Model.Properties)
    </div>
}

<div>
    <hr />
    <p class="zidiumHeader1">Ошибки</p>
    <table>
        <tr>
            <td>
                <a href="@Url.Action("ErrorStatictics", "Events", new { componentId = Model.Component.Id })">
                    Количество ошибок за период
                </a>
            </td>
            <td style="padding-left: 20px;">
                <div id="errors-table-div">
                    @Html.Partial("ComponentErrorStatistics", new ComponentErrorStatisticsModel() { ShowWait = true })
                </div>
            </td>
        </tr>
    </table>
</div>


<hr />

<div class="row">
    <div class="col-sm-12">
        <p class="zidiumHeader1">Проверки</p>
        @if (UserHelper.CurrentUser(Context).CanEditCommonData())
        {
            <div class="bottom10px">
                <span>Добавить проверку: </span>
                <a href="@Url.Action("Edit", "HttpRequestCheck", new { componentId = Model.Component.Id })" class="btn btn-default">Http</a>
                <a href="@Url.Action("Edit", "PingChecks", new { componentId = Model.Component.Id })" class="btn btn-default">Ping</a>
                <a href="@Url.Action("Edit", "DomainNamePaymentPeriodChecks", new { componentId = Model.Component.Id })" class="btn btn-default">Domain</a>
                <a href="@Url.Action("Edit", "SslCertificateExpirationDateChecks", new { componentId = Model.Component.Id })" class="btn btn-default">Ssl</a>
                <a href="@Url.Action("Edit", "SqlChecks", new { componentId = Model.Component.Id })" class="btn btn-default">Sql</a>
                <a href="@Url.Action("Add", "UnitTests", new { componentId = Model.Component.Id })" class="btn btn-default">Пользовательская</a>
            </div>
        }

        @if (Model.UnitTests.Length == 0)
        {
            <p class="simple-text-header">Пока нет ни одной проверки.</p>
        }
        else
        {
            <p>
                <span class="simple-text-header">Количество проверок: </span>
                <span class="simple-text-value">@Model.UnitTests.Length</span>
            </p>
            <table class="table simpleTableClear table-condensed table-hover" style="width: auto;">
                <tr>
                    <th width="160px">Дата выполнения</th>
                    <th>Тип</th>
                    <th>Название</th>
                    <th>Результат</th>
                    <th>Интервал</th>
                    @if (UserHelper.CurrentUser(Context).CanEditCommonData())
                    {
                        <th width="40px"></th>
                        <th width="40px"></th>
                    }
                </tr>
                @foreach (var unitTest in Model.UnitTests)
                {
                    var importanceColor = GuiHelper.GetImportanceColor(unitTest.Bulb.Status);
                    var color = GuiHelper.GetStrongFgColor(importanceColor);
                    <tr style="color: @color">
                        <td class="text-nowrap">@GuiHelper.GetDateTimeString(unitTest.Bulb.EndDate)</td>
                        <td class="text-nowrap">@(unitTest.Type.IsSystem ? unitTest.Type.DisplayName : "API")</td>
                        <td class="text-nowrap">
                            @Html.ActionLink(unitTest.DisplayName, "ResultDetails", "UnitTests", new { id = unitTest.Id }, null)
                        </td>
                        <td>
                            @Html.ActionLink(unitTest.Bulb.GetUnitTestMessage(), "ResultDetails", "UnitTests", new { id = unitTest.Id }, new { @class = GuiHelper.GetComponentStatusTextCssClass(unitTest.Bulb.Status) })
                        </td>
                        <td>
                            @if (unitTest.PeriodSeconds.HasValue)
                            {
                                @GuiHelper.TimeSpanAsString(TimeSpan.FromSeconds(unitTest.PeriodSeconds.Value))
                            }
                            else
                            {
                                <text>не задан</text>
                            }
                        </td>
                        @if (UserHelper.CurrentUser(Context).CanEditCommonData())
                        {
                            <td class="text-right">
                                @if (unitTest.Enable)
                                {
                                    <a href='@Url.Action("Disable", "UnitTests", new { id = unitTest.Id })' onclick="ziShowModalDialogByLink(this, event); " title="Выключить проверку" style="margin-left: 10px;" class="text-muted">
                                        <span class="glyphicon glyphicon-off" aria-hidden="true"></span>
                                    </a>
                                }
                                else
                                {
                                    <a href='@Url.Action("Enable", "UnitTests", new { id = unitTest.Id })' onclick="enableObject(this, event); " title="Включить проверку" style="margin-left: 10px;" class="text-muted enable-btn">
                                        <span class="glyphicon glyphicon-record" aria-hidden="true"></span>
                                    </a>
                                }
                            </td>
                            <td class="text-right">
                                <a href='@Url.Action("Delete", "UnitTests", new { id = unitTest.Id })' onclick="ziShowModalDialogByLink(this, event); " title="Удалить проверку" style="margin-left: 10px;" class="text-danger">
                                    <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                                </a>
                            </td>
                        }
                    </tr>
                }
            </table>
        }
    </div>
</div>

<div>
    <hr />
    <p class="zidiumHeader1">Метрики</p>
    @if (UserHelper.CurrentUser(Context).CanEditCommonData())
    {
        <div class="bottom10px">
            @Html.ActionLink("Добавить метрику", "Edit", "Metrics", new { componentId = Model.Component.Id }, new { @class = "btn btn-default" })
        </div>
    }

    @if (Model.Metrics.Length == 0)
    {
        <p class="simple-text-header">Пока метрик нет.</p>
    }
    else
    {
        <p>
            <span class="simple-text-header">Количество метрик: </span>
            <span class="simple-text-value">@Model.Metrics.Length</span>
        </p>

        <table class="table simpleTableClear table-condensed table-hover top10px" style="width: auto;">
            <thead>
                <tr>
                    <th width="30px"></th>
                    <th class="column-date">Дата значения</th>
                    <th>Название</th>
                    <th>Значение</th>
                    <th class="column-date">Актуально до</th>
                    @if (UserHelper.CurrentUser(Context).CanEditCommonData())
                    {
                        <th width="40px"></th>
                        <th width="40px"></th>
                    }
                </tr>
            </thead>
            <tbody id="table-counters">
                @foreach (var metric in Model.Metrics)
                {
                    @Html.Partial("ComponentCounterRow", metric)
                }
            </tbody>
        </table>
    }
</div>

<div>
    <hr />
    <p class="zidiumHeader1">Дети</p>
    @if (UserHelper.CurrentUser(Context).CanEditCommonData())
    {
        <div class="bottom10px">
            @Html.ActionLink("Добавить дочерний компонент", "Add", new { parentId = Model.Component.Id }, new { @class = "btn btn-default" })
        </div>
    }

    @if (Model.Childs.Length == 0)
    {
        <p class="simple-text-header">Пока дочерних компонентов нет.</p>
    }
    else
    {
        <p>
            <span class="simple-text-header">Количество дочерних компонентов: </span>
            <span class="simple-text-value">@Model.Childs.Length</span>
        </p>
        <table class="table simpleTableClear table-condensed table-hover top10px">
            <tr>
                <th width="160px">Дата начала статуса</th>
                <th>Тип компонента</th>
                <th>Название компонента</th>
                <th>Комментарий к статусу</th>
                @if (UserHelper.CurrentUser(Context).CanEditCommonData())
                {
                    <th width="40px"></th>
                    <th width="40px"></th>
                }
            </tr>
            @foreach (var child in Model.Childs)
            {
                var statusData = child.ExternalStatus;
                var importanceColor = GuiHelper.GetImportanceColor(statusData.Status);
                var color = GuiHelper.GetStrongFgColor(importanceColor);
                <tr style="color: @color">
                    <td class="text-nowrap">@GuiHelper.GetDateTimeString(statusData.StartDate)</td>
                    <td class="text-nowrap">@child.ComponentType.DisplayName</td>
                    <td class="text-nowrap">@Html.ActionLink(child.DisplayName, "Show", "Components", new { id = child.Id }, null)</td>
                    <td class="text-wordbreak">@statusData.Message</td>
                    @if (UserHelper.CurrentUser(Context).CanEditCommonData())
                    {
                        <td class="text-right">
                            @if (child.Enable)
                            {
                                <a href='@Url.Action("Disable", new { id = child.Id })' onclick="ziShowModalDialogByLink(this, event);" title="Выключить компонент" style="margin-left: 10px;" class="text-muted">
                                    <span class="glyphicon glyphicon-off" aria-hidden="true"></span>
                                </a>
                            }
                            else
                            {
                                <a href='@Url.Action("Enable", new { id = child.Id })' onclick="enableObject(this, event);" title="Включить компонент" style="margin-left: 10px;" class="text-muted enable-btn">
                                    <span class="glyphicon glyphicon-play" aria-hidden="true"></span>
                                </a>
                            }
                        </td>
                        <td class="text-right">
                            <a href='@Url.Action("Delete", new { id = child.Id })' onclick="ziShowModalDialogByLink(this, event);" title="Удалить компонент" style="margin-left: 10px;" class="text-danger">
                                <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                            </a>
                        </td>
                    }
                </tr>
            }
        </table>
    }
</div>

<div>
    <hr />
    <p class="zidiumHeader1">Лог</p>
    <div class="row">
        <div class="col-sm-6">
            <p>Посмотреть лог за последние</p>
            <a href="@Model.GetLogUrl(Url, TimeSpan.FromMinutes(5))" class="btn btn-default">5 минут</a>
            <a href="@Model.GetLogUrl(Url, TimeSpan.FromMinutes(20))" class="btn btn-default">20 минут</a>
            <a href="@Model.GetLogUrl(Url, TimeSpan.FromHours(1))" class="btn btn-default">1 час</a>
            <a href="@Model.GetLogUrl(Url, TimeSpan.FromHours(4))" class="btn btn-default">4 часа</a>
            <a href="@Model.GetLogUrl(Url, TimeSpan.FromDays(1))" class="btn btn-default">1 день</a>
        </div>
        <div class="col-sm-6">
            @if (UserHelper.CurrentUser(Context).CanEditCommonData())
            {
                <button id="edit-log-levels" class="btn btn-default btn-xs">Настроить</button>
                <button id="add-log-link" class="btn btn-default btn-xs">Добавить запись</button>
            }
            <table id="logLevelsTable" class="table simpleTableClear table-condensed table-hover">
                <tr>
                    <th>@LogLevel.Trace</th>
                    <th>@LogLevel.Debug</th>
                    <th>@LogLevel.Info</th>
                    <th>@LogLevel.Warning</th>
                    <th>@LogLevel.Error</th>
                    <th>@LogLevel.Fatal</th>
                </tr>

                <tr>
                    @{WriteLogLevelStatus(Model.LogConfig.IsTraceEnabled);}
                    @{WriteLogLevelStatus(Model.LogConfig.IsDebugEnabled);}
                    @{WriteLogLevelStatus(Model.LogConfig.IsInfoEnabled);}
                    @{WriteLogLevelStatus(Model.LogConfig.IsWarningEnabled);}
                    @{WriteLogLevelStatus(Model.LogConfig.IsErrorEnabled);}
                    @{WriteLogLevelStatus(Model.LogConfig.IsFatalEnabled);}
                </tr>
            </table>
        </div>
    </div>
</div>

<div>
    <hr />
    <p class="zidiumHeader1">Подписки</p>
    <div class="row">
        <div class="col-sm-12">
            <div class="smart-block"
                 data-config="component-subscriptions"
                 data-url="@Url.Action("ShowComponentSubscriptions", "Subscriptions", new {ComponentId = Model.Component.Id})">
                <p><img src="/Content/Icons/ajax-loader-white.gif" /></p>
            </div>
        </div>
    </div>
</div>

@{
    void WriteLogLevelStatus(bool enable)
    {
        <td class="text-center log-state-sign">
            @if (enable)
            {
                <span class="glyphicon glyphicon-ok-sign text-strongfggreen"></span>
            }
            else
            {
                <span class="glyphicon glyphicon-remove-sign text-strongfgred"></span>
            }
        </td>
    }
}

@section Scripts
{
    <script>
        $(function() {
            $('#btn-stats-hour').click(function() { loadStats('@TimelineInterval.Hour'); });
            $('#btn-stats-day').click(function() { loadStats('@TimelineInterval.Day'); });
            $('#btn-stats-week').click(function() { loadStats('@TimelineInterval.Week'); });
            $('#btn-stats-month').click(function() { loadStats('@TimelineInterval.Month'); });
            $('#btn-stats-day').click();

            var blocks = $(".smart-block");
            smartBlocks.load({ elements: blocks });

            ziSetAjaxLink(".zi-ajax-link");
            ziCreateModalDialog("#add-log-link");
            ziCreateModalDialog("#add-event-link");
            @{
                var getErrorsUrl = Url.Action("GetComponentErrorStatisticsHtml", new {componentId = Model.Component.Id});
            }

            $("#errors-table-div").load('@getErrorsUrl');

            // Обработчик кнопки добавления записи лога
            $('#add-log-link').click(addLog);

            // Обработчик кнопки настройки уровней лога
            $('#edit-log-levels').click(editLogLevels);
        });

        function loadStats(interval) {
            $('#timelines-loader').show();

            var url = '@Html.Raw(Url.Action("ShowTimelinesPartial", new {id = Model.Component.Id}))';
            var params = { interval: interval };

            $('#timelines-table-body')
                .load(url,
                    params,
                    function() {
                        $('#timelines-loader').hide();
                    });
        }

        function enableObject(elem, event) {
            event.preventDefault();
            elem = $(elem);
            var status = elem.data("enableStatus");
            if (status == "inProgress") {
                return;
            } else {
                elem.data("enableStatus", "inProgress");
                var oldHtml = elem.html();
                elem.data("enableOldHtml", oldHtml);
                var waitElemHtml = "<img style='height:16px;' src='/content/icons/ajax-loader.gif'>";
                elem.html(waitElemHtml);

                var url = elem.attr("href");
                var onSuccess = function() {
                    document.location.reload();
                }
                var onError = function(erorMessage) {
                    elem.data("enableStatus", "end");
                    var oldHtml = elem.data("enableOldHtml");
                    elem.html(oldHtml);
                    myShowErrorMessage(erorMessage);
                }
                ziExecuteJsonUrl(url, null, onSuccess, onError);
            }
        }

        // Добавление записи лога
        function addLog() {
            var url = '@Url.Action("Add", "Logs", new {componentId = Model.Component.Id})';
            dialogs.showModal(url,
                'Добавление записи лога',
                function() {
                    bootbox.alert("Запись успешно добавлена");
                });
        }

        // Настройка уровней лога
        function editLogLevels() {
            var url = '@Url.Action("Edit", "Logs", new {componentId = Model.Component.Id})';
            dialogs.showModal(url,
                'Настройка уровней лога',
                function() {
                    utils.reloadPage();
                });
        }

    </script>
}
