@using Zidium.UserAccount.Helpers
@model Zidium.UserAccount.Models.ComponentTreeDetails.ComponentDetailsUnittestsModel

@if (Model.CanEdit)
{
    <p>
        Добавить проверку:
        <button type="button" id="component-details-unittests-add-http" class="btn btn-default btn-xs" data-component-id="@Model.Id">
            Http
        </button>

        <button type="button" id="component-details-unittests-add-ping" class="btn btn-default btn-xs" data-component-id="@Model.Id">
            Ping
        </button>

        <button type="button" id="component-details-unittests-add-domain" class="btn btn-default btn-xs" data-component-id="@Model.Id">
            Domain
        </button>

        <button type="button" id="component-details-unittests-add-ssl" class="btn btn-default btn-xs" data-component-id="@Model.Id">
            Ssl
        </button>

        <button type="button" id="component-details-unittests-add-sql" class="btn btn-default btn-xs" data-component-id="@Model.Id">
            Sql
        </button>

        <button type="button" id="component-details-unittests-add-custom" class="btn btn-default btn-xs" data-component-id="@Model.Id">
            Пользовательская
        </button>
    </p>
}

@if (Model.SystemUnittests.Length > 0)
{
    <p><b>Системные проверки</b></p>

    <table id="component-details-system-unittests-table" class="table simpleTableClear table-condensed table-fixed">
        <thead>
            <tr>
                <th class="th-status">Статус</th>
                <th class="th-name">Название</th>
                <th class="th-result">Результат</th>
                <th class="th-actions"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var unittest in Model.SystemUnittests)
            {
                var importanceColor = GuiHelper.GetImportanceColor(unittest.Status);
                var color = GuiHelper.GetStrongFgColor(importanceColor);
                <tr style="color: @color" data-id="@unittest.Id">
                    <td>
                        @unittest.Status
                        <br />
                        <span class="unittest-status-duration">@GuiHelper.TimeSpanAs2UnitString(unittest.StatusDuration)</span>
                    </td>
                    <td>
                        <a href="@Url.Action("ResultDetails", "UnitTests", new {id = unittest.Id})" target="_blank" title="@unittest.Name">
                            @unittest.TypeName &mdash; @unittest.Name
                        </a>
                        <br />
                        <span class="unittest-interval">
                            Выполняется раз в @GuiHelper.TimeSpanAsString(unittest.Interval)
                        </span>
                    </td>
                    <td>
                        <span title="@unittest.LastResult">@unittest.LastResult</span>
                        <br />
                        <span class="unittest-last-result-date">
                            @GuiHelper.GetDateTimeString(unittest.LastResultDate)
                        </span>
                    </td>
                    <td class="td-actions">
                        @if (Model.CanEdit)
                        {
                            <a title="Выполнить проверку сейчас" class="text-success unittest-run-link" href="#">
                                <span class="glyphicon glyphicon-play"></span>
                            </a>
                            if (unittest.IsEnabled)
                            {
                                <a title="Выключить проверку" class="text-muted unittest-disable-link" href="#">
                                    <span class="glyphicon glyphicon-off"></span>
                                </a>
                            }
                            else
                            {
                                <a title="Включить проверку" class="text-muted unittest-enable-link" href="#">
                                    <span class="glyphicon glyphicon-record"></span>
                                </a>
                            }
                            <a title="Удалить проверку" class="text-danger unittest-delete-link" href="#">
                                <span class="glyphicon glyphicon-remove"></span>
                            </a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (Model.UserUnittests.Length > 0)
{
    <p><b>Пользовательские проверки</b></p>

    <table id="component-details-user-unittests-table" class="table simpleTableClear table-condensed table-fixed">
        <thead>
            <tr>
                <th class="th-status">Статус</th>
                <th class="th-name">Название</th>
                <th class="th-result">Результат</th>
                <th class="th-actions"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var unittest in Model.UserUnittests)
            {
                var importanceColor = GuiHelper.GetImportanceColor(unittest.Status);
                var color = GuiHelper.GetStrongFgColor(importanceColor);
                <tr style="color: @color" data-id="@unittest.Id">
                    <td>
                        @unittest.Status
                        <br />
                        <span class="unittest-status-duration">@GuiHelper.TimeSpanAs2UnitString(unittest.StatusDuration)</span>
                    </td>
                    <td>
                        <a href="@Url.Action("ResultDetails", "UnitTests", new {id = unittest.Id})" target="_blank" title="@unittest.Name">
                            @unittest.Name
                        </a>
                        <br />
                        <span class="unittest-actual-interval">
                            Актуальна @GuiHelper.TimeSpanAs2UnitString(unittest.ActualInterval) (до @GuiHelper.GetDateTimeString(unittest.ActualDate))
                        </span>
                    </td>
                    <td>
                        <span title="@unittest.LastResult">@unittest.LastResult</span>
                        <br />
                        <span class="unittest-last-result-date">
                            @GuiHelper.GetDateTimeString(unittest.LastResultDate)
                        </span>
                    </td>
                    <td class="td-actions">
                        @if (Model.CanEdit)
                        {
                            if (unittest.IsEnabled)
                            {
                                <a title="Выключить проверку" class="text-muted unittest-disable-link" href="#">
                                    <span class="glyphicon glyphicon-off"></span>
                                </a>
                            }
                            else
                            {
                                <a title="Включить проверку" class="text-muted unittest-enable-link smart-block-button" href="#">
                                    <span class="glyphicon glyphicon-record"></span>
                                </a>
                            }
                            <a title="Удалить проверку" class="text-danger unittest-delete-link" href="#">
                                <span class="glyphicon glyphicon-remove"></span>
                            </a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (Model.SystemUnittests.Length == 0 && Model.UserUnittests.Length == 0)
{
    <p>У компонента нет проверок</p>
}

<script>
    $('#component-details-system-unittests-table .unittest-delete-link, #component-details-user-unittests-table .unittest-delete-link').click(function (event) {
        event.preventDefault();
        var me = $(this);
        var url = '@Url.Action("DeleteAjax", "Unittests")';
        var id = me.closest('tr').data('id');
        var data = { id: id };
        dialogs.showModal(url, 'Удаление проверки', function() {
            componentTreeDetails.accordionReloadCurrentGroup(me);
            submitForm();
        }, data);
    });

    $('#component-details-system-unittests-table .unittest-disable-link, #component-details-user-unittests-table .unittest-disable-link').click(function (event) {
        event.preventDefault();
        var me = $(this);
        var url = '@Url.Action("DisableAjax", "Unittests")';
        var id = me.closest('tr').data('id');
        var data = { id: id };
        dialogs.showModal(url, 'Выключение проверки', function() {
            componentTreeDetails.accordionReloadCurrentGroup(me);
            submitForm();
        }, data);
    });

    $('#component-details-system-unittests-table .unittest-enable-link, #component-details-user-unittests-table .unittest-enable-link').click(function (event) {
        event.preventDefault();
        var me = $(this);
        var url = '@Url.Action("EnableAjax", "Unittests")';
        var id = me.closest('tr').data('id');
        var data = { id: id };
        smartButtons.beginAction(me);
        smartBlocks.doAjax(url, 'POST', data, function () {
            componentTreeDetails.accordionReloadCurrentGroup(me);
            submitForm();
            }, function () {
                smartButtons.endAction(me);
            });
    });

    $('#component-details-system-unittests-table .unittest-run-link').click(function (event) {
        event.preventDefault();
        var me = $(this);
        var url = '@Url.Action("RunNowAjax", "Unittests")';
        var id = me.closest('tr').data('id');
        var data = { id: id };
        smartButtons.beginAction(me);
        smartBlocks.doAjax(url, 'POST', data, function () {
            componentTreeDetails.accordionReloadCurrentGroup(me);
            submitForm();
        }, function () {
            smartButtons.endAction(me);
        });
    });

    $('#component-details-unittests-add-http').click(function (event) {
        event.preventDefault();
        var me = $(this);
        var componentId = me.data('component-id');
        addHttpUnitTest(componentId, me);
    });

    $('#component-details-unittests-add-ping').click(function (event) {
        event.preventDefault();
        var me = $(this);
        var componentId = me.data('component-id');
        addPingUnitTest(componentId, me);
    });

    $('#component-details-unittests-add-domain').click(function (event) {
        event.preventDefault();
        var me = $(this);
        var componentId = me.data('component-id');
        addDomainUnitTest(componentId, me);
    });

    $('#component-details-unittests-add-ssl').click(function (event) {
        event.preventDefault();
        var me = $(this);
        var componentId = me.data('component-id');
        addSslUnitTest(componentId, me);
    });

    $('#component-details-unittests-add-sql').click(function (event) {
        event.preventDefault();
        var me = $(this);
        var componentId = me.data('component-id');
        addSqlUnitTest(componentId, me);
    });

    $('#component-details-unittests-add-custom').click(function (event) {
        event.preventDefault();
        var me = $(this);
        var componentId = me.data('component-id');
        addCustomUnitTest(componentId, me);
    });

</script>