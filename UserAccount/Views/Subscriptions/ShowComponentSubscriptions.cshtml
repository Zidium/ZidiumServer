@using Zidium.Core.Common.Helpers
@using Zidium.Storage
@using Zidium.UserAccount.Helpers
@using Zidium.UserAccount.Models.Subscriptions

@model ShowComponentSubscriptionsModel

<style>
    .subscription-badge {
        height: 20px;
        width: 20px;
        border-radius: 10px;
        display: block;
    }

    #my-subcriptions-table td {
        padding: 5px 20px;
        text-align: center;
        border-bottom: 1px #e7e7e7 dashed;
    }

        #my-subcriptions-table td:first-child {
            color: gray;
            text-align: right;
            border-bottom: 0px gray dashed !important;
        }

    .emptyCell {
        color: gray;
    }

    .subscriptions-table-container {
        overflow-x: auto;
    }
</style>

@helper WriteImportanceTd(SubscriptionForRead subscription)
{
    if (subscription == null)
    {
        <span class="emptyCell">&mdash;</span>
    }
    else
    {
        <text>@SubscriptionIconHelper.GetImgHtml(subscription)</text>
    }
}

@helper WriteDurationTd(SubscriptionForRead subscription)
{
    if (subscription == null || subscription.IsEnabled == false || subscription.DurationMinimumInSeconds == null)
    {
        <span class="emptyCell">&mdash;</span>
    }
    else
    {
        var duration = TimeSpanHelper.FromSeconds(subscription.DurationMinimumInSeconds);
        <text>@TimeSpanHelper.Get2UnitsString(duration.Value)</text>
    }
}

@helper WriteNotifyBetterTd(SubscriptionForRead subscription)
{
    if (subscription == null || subscription.IsEnabled == false || subscription.NotifyBetterStatus == false)
    {
        <span class="emptyCell">&mdash;</span>
    }
    else
    {
        <span>Уведомлять</span>
    }
}

@helper WriteResendTimeTd(SubscriptionForRead subscription)
{
    if (subscription == null || subscription.IsEnabled == false || subscription.ResendTimeInSeconds == null)
    {
        <span class="emptyCell">&mdash;</span>
    }
    else
    {
        var duration = TimeSpanHelper.FromSeconds(subscription.ResendTimeInSeconds);
        <text>@TimeSpanHelper.Get2UnitsString(duration.Value)</text>
    }
}

@helper WriteSendIntervalTd(SubscriptionForRead subscription)
{
    if (subscription == null || subscription.IsEnabled == false || !subscription.SendOnlyInInterval)
    {
        <span class="emptyCell">&mdash;</span>
    }
    else
    {
        var from = (subscription.SendIntervalFromHour ?? 0).ToString("00") + ":" + (subscription.SendIntervalFromMinute ?? 0).ToString("00");
        var to = (subscription.SendIntervalToHour ?? 0).ToString("00") + ":" + (subscription.SendIntervalToMinute ?? 0).ToString("00");
        <text>@from - @to</text>
    }
}

<div id="component-subscriptions-window">
    <div id="component-subscriptions-form">
        <div style="padding: 0px;">
            @if (Model.ViewMode == ShowComponentSubscriptionsModel.ViewModeCode.My)
            {
                <div class="pull-right">
                    @*<span>Мои подписки </span>*@
                    <div style="display: inline" class="dropdown">
                        <a href="#" class="btn btn-default dropdown" data-toggle="dropdown">
                            <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu" role="menu" style="left: auto; right : 0">
                            <li role="presentation"><a role="menuitem" href="#" id="showAllSubscriptionsBtn">Показать все подписки</a></li>
                        </ul>
                    </div>
                    <a href="http://zidium.net/wiki/work-principle/subscriptions" target="_blank" class="btn btn-default">?</a>
                </div>
                <div>
                    <a href="@Url.Action("EditComponentSubscriptions",new{componentId = Model.ComponentId})" id="editComponentSubscriptions" class="btn btn-default" target="_blank">Настроить</a>
                </div>

                <div class="subscriptions-table-container">
                    <table id="my-subcriptions-table" class="simpleTableClear">
                        <tr>
                            <td></td>
                            @foreach (var channel in Model.Channels)
                            {
                                <td><span style="font-weight: bold">@channel</span></td>
                            }
                        </tr>
                        <tr>
                            <td style="text-align: right">Статус</td>
                            @foreach (var channel in Model.Channels)
                            {
                                var channelSubscription = Model.GetSubscription(Model.CurrentUserId, channel);
                                <td>@WriteImportanceTd(channelSubscription != null ? channelSubscription.Info : null)</td>
                            }
                        </tr>
                        <tr>
                            <td style="text-align: right">Длительность</td>
                            @foreach (var channel in Model.Channels)
                            {
                                var channelSubscription = Model.GetSubscription(Model.CurrentUserId, channel);
                                <td>@WriteDurationTd(channelSubscription != null ? channelSubscription.Info : null)</td>
                            }
                        </tr>
                        <tr>
                            <td style="text-align: right">Если лучше</td>
                            @foreach (var channel in Model.Channels)
                            {
                                var channelSubscription = Model.GetSubscription(Model.CurrentUserId, channel);
                                <td>@WriteNotifyBetterTd(channelSubscription != null ? channelSubscription.Info : null)</td>
                            }
                        </tr>
                        <tr>
                            <td style="text-align: right">Напоминания через</td>
                            @foreach (var channel in Model.Channels)
                            {
                                var channelSubscription = Model.GetSubscription(Model.CurrentUserId, channel);
                                <td>@WriteResendTimeTd(channelSubscription != null ? channelSubscription.Info : null)</td>
                            }
                        </tr>
                        <tr>
                            <td style="text-align: right">Ограничение</td>
                            @foreach (var channel in Model.Channels)
                            {
                                var channelSubscription = Model.GetSubscription(Model.CurrentUserId, channel);
                                <td>@WriteSendIntervalTd(channelSubscription != null ? channelSubscription.Info : null)</td>
                            }
                        </tr>
                    </table>
                </div>
            }
            else
            {
                // Если режим = все подписки
                <div class="pull-right">
                    @*<span>Все подписки </span>*@
                    <div style="display: inline" class="dropdown">
                        <a href="#" class="btn btn-default dropdown" data-toggle="dropdown">
                            <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu" role="menu" style="left: auto; right : 0">
                            <li role="presentation"><a role="menuitem" href="#" id="showMySubscriptionsBtn">Показать мои подписки</a></li>
                        </ul>
                    </div>
                </div>
                <table>
                    <tr>
                        <td>
                            <p style="font-weight: bold">Пользователь</p>
                        </td>
                        <td style="padding-left: 10px;">
                            <p style="font-weight: bold">Канал</p>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.DropDownListFor(x => x.UserId, DropDownListHelper.GetUsers(Model.UserId, true), new { @class = "form-control" })
                        </td>
                        <td style="padding-left: 10px;">
                            @Html.DropDownListFor(x => x.Channel, DropDownListHelper.GetSubscriptionChannels(Model.Channel, true), new { @class = "form-control" })
                        </td>
                    </tr>
                </table>

                if (Model.Subscriptions.Length == 0)
                {
                    <p>Нет подписок</p>
                }
                else
                {
                    <div class="subscriptions-table-container">
                        <table id="component-subscriptions-table" class="simpleTable" style="margin-top: 10px; width: auto">
                            <tr>
                                @if (Model.UserId == null)
                                {
                                    <th>Пользователь</th>
                                }
                                <th>Канал</th>
                                <th>Цвет</th>
                                <th>Длительность</th>
                                <th>Интервал повтора</th>
                                <th>Уведомлять об улучшениях?</th>
                                <th>Ограничение</th>
                                <th></th>
                            </tr>
                            @foreach (var subscription in Model.Subscriptions)
                            {
                                var bgColor = GuiHelper.GetStrongBgColor(subscription.Info.Importance);
                                <tr>
                                    @if (Model.UserId == null)
                                    {
                                        <td>@subscription.UserName</td>
                                    }
                                    <td>@subscription.Info.Channel</td>
                                    @if (subscription.Info.IsEnabled == false)
                                    {
                                        <td colspan="4">
                                            <img src="/Content/Icons/forbiddance-20px.png" title="Запрещено отправлять уведомления" />
                                        </td>
                                    }
                                    else
                                    {
                                        <td>
                                            <span class="subscription-badge" style="background-color: @bgColor"></span>
                                        </td>
                                        <td>
                                            @if (subscription.Info.DurationMinimumInSeconds > 0)
                                            {
                                                var duration = TimeSpanHelper.FromSeconds(subscription.Info.DurationMinimumInSeconds);
                                                <span>@TimeSpanHelper.Get2UnitsString(duration.Value)</span>
                                            }
                                        </td>
                                        <td>
                                            @if (subscription.Info.ResendTimeInSeconds > 0)
                                            {
                                                var period = TimeSpanHelper.FromSeconds(subscription.Info.ResendTimeInSeconds);
                                                <span>@TimeSpanHelper.Get2UnitsString(period.Value)</span>
                                            }
                                        </td>
                                        <td>@(subscription.Info.NotifyBetterStatus ? "да" : "")</td>
                                        <td>
                                            @{
                                                var from = (subscription.Info.SendIntervalFromHour ?? 0).ToString("00") + ":" + (subscription.Info.SendIntervalFromMinute ?? 0).ToString("00");
                                                var to = (subscription.Info.SendIntervalToHour ?? 0).ToString("00") + ":" + (subscription.Info.SendIntervalToMinute ?? 0).ToString("00");
                                            }
                                            @from - @to
                                        </td>
                                    }
                                    <td><a href="@Url.Action("Edit", "Subscriptions", new {id = subscription.Info.Id})" target="_blank"><span class="glyphicon glyphicon-edit"></span></a></td>
                                </tr>
                            }
                        </table>
                    </div>
                }
            }
        </div>
    </div>
</div>

<script>
    var config = smartConfig.getOrCreate("component-subscriptions");
    var viewMode = config.getField("viewMode");

    function reloadSmartBlock() {
        var win = $("#component-subscriptions-window");
        var smart = win.closest(".smart-block");
        smartBlocks.showWaitDiv(smart);
        smartBlocks.load({ elements: smart });
    }

    function init() {

        // обработчик события выбора пользователя
        $("#UserId").change(function () {
            var selectedUser = $("#UserId").val();
            var userId = config.getField("userId");
            userId.setValue(selectedUser);
            reloadSmartBlock();
        });

        // обработчик события выбора канала
        $("#Channel").change(function () {
            var selectedChannel = $("#Channel").val();
            var channel = config.getField("channel");
            channel.setValue(selectedChannel);
            reloadSmartBlock();
        });
    }

    init();

    $("#showAllSubscriptionsBtn").click(function (event) {
        event.preventDefault();
        viewMode.setValue("all");
        reloadSmartBlock();
    });

    $("#showMySubscriptionsBtn").click(function (event) {
        event.preventDefault();
        viewMode.setValue("my");
        reloadSmartBlock();
    });
</script>

