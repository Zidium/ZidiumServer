@using Zidium.Core.AccountsDb
@using Zidium.UserAccount.Helpers
@using Zidium.UserAccount.Models
@using Zidium.UserAccount.Models.Controls
@model SubscriptionEditModel
@{
    if (Model.ModalMode)
    {
        Layout = null;
        ViewBag.Large = false;
    }
    if (Model.Object == SubscriptionObject.Default)
    {
        ViewBag.Title = Model.IsNew
            ? "Добавление подписки по умолчанию"
            : "Настройка подписки по умолчанию";
    }
    else if (Model.Object == SubscriptionObject.ComponentType)
    {
        ViewBag.Title = Model.IsNew
            ? "Добавление подписки на тип компонента"
            : "Настройка подписки на тип компонента";
    }
    else if (Model.Object == SubscriptionObject.Component)
    {
        ViewBag.Title = Model.IsNew
            ? "Добавление подписки на компонент"
            : "Настройка подписки на компонент";
    }
    ViewBag.ActiveMenuItems = "Manage,Subscriptions";
}

@if (!Model.ModalMode)
{
    @Html.Partial("_PageTitle")
}

<style>
    #form-edit-subscription .smart-col-labels {
        min-width: 350px;
    }
</style>

<form action="@Url.Action("Edit", "Subscriptions")" method="post" id="form-edit-subscription" class="@(Model.ModalMode?"smart-block-form":"")">
    
    @if (Model.Exception != null)
    {
        <div class="alert alert-danger">@Model.Exception.Message</div>
    }
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.Object)
    @Html.HiddenFor(m => m.ReturnUrl)
    @Html.HiddenFor(m => m.ModalMode)
    @Html.HiddenFor(x => x.UserId)
    @Html.HiddenFor(x => x.CanShowChannel)
    @Html.HiddenFor(x => x.CanShowComponentType)
    @Html.HiddenFor(x => x.CanShowComponent)

    <div class="smart-container">
        @{
            var form = Html.GetFormBuilder(Model);
            var group = form.Group("x");
        }

        @*@{
            if (Model.IsExists || Model.ModalMode)
            {
                <text>@Html.HiddenFor(x => x.UserId)</text>
            }
            if (Model.UserId==null)
            {
                var group = form.GroupFor(x => x.UserId, "Пользователь");
                if (Model.IsNew)
                {
                    // пользователя выбираем только для новых подписок
                    var userItems = DropDownListHelper.GetUsers(Model.UserId, false);
                    group.DropDownList(userItems);
                }
                else
                {
                    group.Paragraph(FullRequestContext.Current.GetUserById(Model.UserId.Value).FioOrLogin);
                }
                group.Render();
            }
        }*@

        @{
            if (Model.CanShowChannel)
            {
                group = form.GroupFor(x => x.Channel, "Канал");
                if (Model.IsNew)
                {
                    var channelItems = DropDownListHelper.GetSubscriptionChannels(Model.Channel, false);
                    group.DropDownList(channelItems);
                }
                else
                {
                    <text>@Html.HiddenFor(x => x.Channel)</text>
                    group.Paragraph(Model.Channel.ToString());
                }
                group.Render();
            }
            else
            {
                <text>@Html.HiddenFor(x => x.Channel)</text>
            }
        }

        @if (Model.Object == SubscriptionObject.ComponentType)
        {
            if (Model.CanShowComponentType)
            {
                group = form.GroupFor(x => x.ComponentTypeId, "Тип компонента");
                if (Model.IsNew)
                {
                    var componentTypeItems = DropDownListHelper.GetComponentTypes(Model.ComponentTypeId, false);
                    group.DropDownList(componentTypeItems);
                }
                else
                {
                    <text>@Html.HiddenFor(x => x.ComponentTypeId)</text>
                    var componentType = FullRequestContext.Current.GetComponentTypeById(Model.ComponentTypeId.Value);
                    group.Paragraph(componentType.DisplayName);
                }
                group.Render();
            }
            else
            {
                <text>@Html.HiddenFor(x => x.ComponentTypeId)</text>
            }
        }

        @if (Model.Object == SubscriptionObject.Component)
        {
            if (Model.CanShowComponent)
            {
                group = form.GroupFor(x => x.ComponentId, "Компонент");
                if (Model.IsNew)
                {
                    group.Control(y => Html.ComponentSelector(x => x.ComponentId, new ComponentSelectorOptions()
                    {
                        AllowEmpty = false,
                        AutoRefreshPage = false,
                        ShowAsList = false,
                        ShowFindButton = true
                    }));
                }
                else
                {
                    <text>@Html.HiddenFor(x => x.ComponentId)</text>
                    var component = FullRequestContext.Current.GetComponentById(Model.ComponentId.Value);
                    group.Control(@<p class="form-control-static">@Html.ComponentPath(component)</p>);
                }
                group.Render();
            }
            else
            {
                <text>@Html.HiddenFor(x => x.ComponentId)</text>
            }
        }

        @{
            form.GroupFor(x => x.IsEnabled, "Отправлять уведомления")
                .Control(@<div class="form-control-static" style="padding-bottom: 0">
                             <p style="display: inline-block; font-size: 13px; margin-right: 10px;" class="label" id="subscription-enable-text"></p>
                             <a href="#" id="subscription-enable-btn" style="color: gray; font-size: 12px;" onclick="setSubscriptionEnabled(event)"></a>
                             @Html.HiddenFor(x => x.IsEnabled)
                         </div>)
                .Render();
        }

        @{
            form.GroupFor(x => x.Color)
                .Label("Минимальный цвет")
                .Tooltip("Если статус компонента будет менее важный, чем указано, то уведомления отправлено не будет")
                .Control(x => Html.ColorStatusSelector(m => m.Color, new ColorStatusSelectorOptions()
                {
                    MultiSelectMode = false,
                    AutoRefreshPage = false
                }))
                .Render();
        }

        @{
            form.GroupFor(x => x.NotifyBetterStatus, "Уведомлять когда стало лучше?")
                .Tooltip(@<div>
                    <p>
                        Если в настройках подписки минимальный цвет указан красный,
                        то уведомления будут приходить только, когда компонент будет красным.
                        Вы не получите уведомления о том, что компонент стал зеленым (стало лучше).
                    </p>
                    <p>Но если включить данную галочку, то вы получите уведомленияе, когда компонент вернётся в зеленый цвет.</p>
                </div>)
            .CheckBox()
            .Render();
        }

        @{
            form.GroupFor(x => x.MinimumDuration, "Минимальная длительность")
                .SetControlWidth("200px")
                .Control(x => Html.TimeSpanSelector(y => y.MinimumDuration))
                .Render();
        }

        @{
            form.GroupFor(x => x.ResendTime, "Интервал напоминаний")
                .SetControlWidth("200px")
                .Control(x => Html.TimeSpanSelector(y => y.ResendTime))
                .Render();
        }
        
        @*@if (Model.ModalMode)
        {
            <div class="smart-row">
                <hr/>
            </div>
        }*@
        @{
            form.Group("Submit")
                .Label("")
                .Control(@<div style="padding-top: 20px;">
                             <button type="submit" class="btn btn-primary smart-button">
                                 Сохранить
                                 <img src="~/Content/Icons/ajax-loader-blue.gif" id="save-loader" class="collapse" />
                             </button>
                             @if (Model.ModalMode)
                             {
                                <button type="button" class="btn btn-default smart-button" data-dismiss="modal">Отмена</button>
                             }
                             else
                             {
                                <a class="btn btn-default smart-button" href="@Model.ReturnUrl">Вернуться к подпискам</a>
                             }
                             @if (Model.IsExists && Model.Object != SubscriptionObject.Default)
                             {
                                 <a class="btn btn-default smart-button" href="#" onclick="deleteSubscription(event);" style="min-width: 5px;" title="Удалить">
                                     <span class="glyphicon glyphicon-trash"></span>
                                 </a>
                             }
                          </div>)
                .Render();
        }
    </div>
</form>

@if (!Model.ModalMode)
{
    @Scripts.Render("~/Scripts/AllControls")
}


<script>

    function updateEnableControl() {

        var form = $("#form-edit-subscription");
        var p = $("#subscription-enable-text", form);
        var btn = $("#subscription-enable-btn", form);
        var value = $("#IsEnabled", form).val().toLowerCase() == "true";

        if (value) {
            // разрешено
            p.text("Разрешено");
            p.removeClass("label-danger");
            p.addClass("label-success");
            btn.text("Запретить");
            $(".smart-row", form).show();
        } else {
            // запрещено
            p.text("Запрещено");
            p.addClass("label-danger");
            p.removeClass("label-success");
            btn.text("Разрешить");
            $("#smart-row-for-Color", form).hide();
            $("#smart-row-for-NotifyBetterStatus", form).hide();
            $("#smart-row-for-MinimumDuration", form).hide();
            $("#smart-row-for-ResendTime", form).hide();
        }
    }

    function setSubscriptionEnabled(event) {
        event.preventDefault();
        var form = $("#form-edit-subscription");
        var valueElem = $("#IsEnabled", form);
        var value = valueElem.val().toLowerCase() == "true";
        if (value) {
            valueElem.val("false");
        } else {
            valueElem.val("true");
        }
        updateEnableControl();
    }

    function deleteSubscription(event) {
        event.preventDefault();
        dialogs.common.deleteSubscription(
            '@Model.Id',
            function() {
                document.location.href = '@Model.ReturnUrl';
            });
    }
    
    updateEnableControl();
    var form = $("#form-edit-subscription");
    initTooltips(form);

</script>