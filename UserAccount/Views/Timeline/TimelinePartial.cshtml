@using Zidium.Core.Api
@using Zidium.UserAccount.Helpers
@model Zidium.UserAccount.Models.TimelineModel

@{ var id = Guid.NewGuid().ToString(); }

<div class="timeline-container">
    <div>
        <div class="timeline">
            <div class="timeline-subcontainer" id="@id">
                @foreach (var item in Model.Items)
                {
                    <a href="@(item.EventId.HasValue ? Url.Action("Show", "Events", new { id = item.EventId }) : null)" target="_blank" class="timeline-item"
                       style="display: inline-block; width: @item.WidthStr%; height: 100%; background-color: @item.Color; float: left;"
                       data-start-date="@item.StartDateStr" data-end-date="@item.EndDateStr" data-count="@item.CountStr" data-duration="@item.DurationStr"
                       data-is-empty="@(!item.EventId.HasValue)" data-message="@item.Message">
                    </a>
                }
            </div>
        </div>
        <div class="timeline-right @(!Model.HideUptime ? "timeline-right-uptime" : null)">
            @if (!Model.HideUptime)
            {
                <span>
                    @(Model.OkTime)%
                </span>
            }
            <span class="timeline-icon">
                @{
                    string url;
                    if (Model.Category == EventCategory.UnitTestStatus)
                    {
                        url = Url.Action("Index", "Events", new {unitTestId = Model.OwnerId, fromDate = GuiHelper.GetUrlDateTimeString(Model.DateFrom), toDate = GuiHelper.GetUrlDateTimeString(Model.DateTo), category = Model.Category.ToString()});
                    }
                    else if (Model.Category == EventCategory.MetricStatus)
                    {
                        url = Url.Action("Index", "Events", new {metricId = Model.OwnerId, fromDate = GuiHelper.GetUrlDateTimeString(Model.DateFrom), toDate = GuiHelper.GetUrlDateTimeString(Model.DateTo), category = Model.Category.ToString()});
                    }
                    else if (Model.Category == EventCategory.ComponentExternalStatus)
                    {
                        url = Url.Action("Index", "Events", new {componentId = Model.OwnerId, fromDate = GuiHelper.GetUrlDateTimeString(Model.DateFrom), toDate = GuiHelper.GetUrlDateTimeString(Model.DateTo), category = Model.Category.ToString()});
                    }
                    else if (Model.Category == EventCategory.ComponentEventsStatus)
                    {
                        url = Url.Action("Index", "Events", new {componentId = Model.OwnerId, fromDate = GuiHelper.GetUrlDateTimeString(Model.DateFrom), toDate = GuiHelper.GetUrlDateTimeString(Model.DateTo), category = Model.Category.ToString()});
                    }
                    else if (Model.Category == EventCategory.ComponentUnitTestsStatus)
                    {
                        url = Url.Action("Index", "Events", new {componentId = Model.OwnerId, fromDate = GuiHelper.GetUrlDateTimeString(Model.DateFrom), toDate = GuiHelper.GetUrlDateTimeString(Model.DateTo), category = Model.Category.ToString()});
                    }
                    else if (Model.Category == EventCategory.ComponentMetricsStatus)
                    {
                        url = Url.Action("Index", "Events", new {componentId = Model.OwnerId, fromDate = GuiHelper.GetUrlDateTimeString(Model.DateFrom), toDate = GuiHelper.GetUrlDateTimeString(Model.DateTo), category = Model.Category.ToString()});
                    }
                    else if (Model.Category == EventCategory.ComponentChildsStatus)
                    {
                        url = Url.Action("Index", "Events", new {componentId = Model.OwnerId, fromDate = GuiHelper.GetUrlDateTimeString(Model.DateFrom), toDate = GuiHelper.GetUrlDateTimeString(Model.DateTo), category = Model.Category.ToString()});
                    }
                    else
                    {
                        url = Url.Action("Index", "Events", new {componentId = Model.OwnerId, fromDate = GuiHelper.GetUrlDateTimeString(Model.DateFrom), toDate = GuiHelper.GetUrlDateTimeString(Model.DateTo), eventTypeId = Model.EventTypeId});
                    }
                }
                <a href='@url' title='Показать в виде таблицы' target="_blank">
                    <span class="glyphicon glyphicon-list-alt"></span>
                </a>
            </span>
        </div>
    </div>

    <script>
        $("#@id .timeline-item").tooltipster({
            arrow: true,
            contentAsHTML: true,
            interactive: true,
            functionInit: function (origin) {
                var item = $(origin);
                var startDate = item.data('start-date');
                var endDate = item.data('end-date');
                var count = item.data('count');
                var duration = item.data('duration');
                var isEmpty = item.data('is-empty') === 'True';
                var message = item.data('message');

                var html = "<div class='text-nowrap bottom10px'>Началось: <b>" + startDate + "</b></div>" +
                    "<div class='text-nowrap bottom10px'>Закончилось: <b>" + endDate + "</b></div>";
                if (duration != null && duration != '')
                    html += "<div class='text-nowrap bottom10px'>Длительность: <b>" + duration + "</b></div>";

                if (count != null && count != '')
                    html += "<div class='text-nowrap bottom10px'>Количество: <b>" + count + "</b></div>";

                if (isEmpty)
                    html += "<div class='text-nowrap'>В этом промежутке ничего не было</div>";
                else
                    html += "<div class='text-prewrap'>" + message + "</div>";

                return html;
            }
        });
    </script>
</div>