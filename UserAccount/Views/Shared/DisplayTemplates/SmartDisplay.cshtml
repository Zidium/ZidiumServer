@using Zidium.UserAccount.Helpers
@using Zidium.Storage
@using Zidium.UserAccount.Models.Controls

@model dynamic

@{
    var metadata = ModelMetadata.FromLambdaExpression(m => m, ViewData);
    var type = metadata.ModelType;
    var basetype = Nullable.GetUnderlyingType(type);
    if (basetype != null)
    {
        type = basetype;
    }
}

<div class="smart-row">
    <div class="smart-col-labels">
        @Html.LabelFor(m => m, new { @class = "control-label" })
    </div>

    <div class="smart-col-fields">
        <p class="form-control-static text-wordbreak">
            @if (@Model != null)
            {
                if (type == typeof(bool))
                {
                    @((bool)Model ? "Да" : "Нет")
                }
                else if (type == typeof(DateTime))
                {
                    @Html.Raw(((DateTime)Model).ToString("dd.MM.yyyy HH:mm:ss"))
                }
                else if (type == typeof(TimeSpan))
                {
                    @Html.Raw(GuiHelper.TimeSpanAsString((TimeSpan)Model))
                }
                else if (Model is ComponentForRead)
                {
                    @Html.ActionLink((Model as ComponentForRead).DisplayName, "Show", "Components", new { id = (Model as ComponentForRead).Id }, null)
                }
                else if (Model is ComponentTypeForRead)
                {
                    @Html.ActionLink((Model as ComponentTypeForRead).DisplayName, "Show", "ComponentTypes", new { id = (Model as ComponentTypeForRead).Id }, null)
                }
                else if (Model is EventTypeForRead)
                {
                    @Html.ActionLink((Model as EventTypeForRead).DisplayName, "Show", "EventTypes", new { id = (Model as EventTypeForRead).Id }, null)
                }
                else if (Model is EventForRead)
                {
                    @Html.ActionLink((Model as EventForRead).Message ?? (Model as EventForRead).Id.ToString(), "Show", "Events", new { id = (Model as EventForRead).Id }, null)
                }
                else if (Model is UserForRead)
                {
                    @Html.ActionLink((Model as UserForRead).Login, "Show", "Users", new { id = (Model as UserForRead).Id }, null)
                }
                else if (Model is SubscriptionForRead)
                {
                    @Html.ActionLink((Model as SubscriptionForRead).Id.ToString(), "Edit", "Subscriptions", new { id = (Model as SubscriptionForRead).Id }, null)
                }
                else if (Model is UnitTestTypeForRead)
                {
                    @Html.ActionLink((Model as UnitTestTypeForRead).DisplayName, "Show", "UnitTestTypes", new { id = (Model as UnitTestTypeForRead).Id }, null)
                }
                else if (Model is EventImportance)
                {
                    @Html.EventImportanceLabel((EventImportance)Model)
                }
                else if (Model is MonitoringStatus)
                {
                    <span class="@GuiHelper.GetComponentStatusLabelCssClass((MonitoringStatus) Model)">@Model</span>
                }
                else if (Model is ObjectColor)
                {
                    <span class="label @GuiHelper.GetStrongBgColorCss(Model)">@Model</span>
                }
                else if (Model is MetricTypeForRead)
                {
                    @Html.ActionLink((Model as MetricTypeForRead).DisplayName, "Show", "MetricTypes", new { id = (Model as MetricTypeForRead).Id }, null)
                }
                else if (Model is ColorStatusSelectorValue)
                {
                    var colors = (Model as ColorStatusSelectorValue).GetSelectedColors().Select(t => Zidium.UserAccount.Helpers.EnumHelper.EnumToString(t)).ToArray();
                    var colorsString = string.Join(", ", colors);
                    if (!string.IsNullOrEmpty(colorsString))
                    {
                        <span>@colorsString</span>
                    }
                    else
                    {
                        <span class="text-muted">не указан</span>
                    }
                }
                else
                {
                    @Model.ToString()
                }
            }
            else
            {
                <span class="text-muted">не задано</span>
            }
        </p>
    </div>
</div>
