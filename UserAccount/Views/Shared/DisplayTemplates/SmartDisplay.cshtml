@using Zidium.Core.AccountsDb
@using Zidium.Core.Api
@using Zidium.UserAccount.Helpers
@using Zidium.Core.Common;
@using Zidium.UserAccount.Models.Controls
@model dynamic

@{
    var metadata = ModelMetadata.FromLambdaExpression(m => m, ViewData);
    var type = metadata.ModelType;
    var basetype = Nullable.GetUnderlyingType(type);
    if (basetype != null)
    {
        type = basetype;
    }
}

<div class="smart-row">
    <div class="smart-col-labels">
        @Html.LabelFor(m => m, new { @class = "control-label" })
    </div>

    <div class="smart-col-fields">
        <p class="form-control-static text-wordbreak">
            @if (@Model != null)
            {
                if (type == typeof(bool))
                {
                    @((bool)Model ? "Да" : "Нет")
                }
                else if (type == typeof(DateTime))
                {
                    @Html.Raw(((DateTime)Model).ToString("dd.MM.yyyy HH:mm:ss"))
                }
                else if (type == typeof(TimeSpan))
                {
                    @Html.Raw(GuiHelper.TimeSpanAsString((TimeSpan)Model))
                }
                else if (Model is Component)
                {
                    @Html.ActionLink((Model as Component).DisplayName, "Show", "Components", new { id = (Model as Component).Id }, null)
                }
                else if (Model is ComponentType)
                {
                    @Html.ActionLink((Model as ComponentType).DisplayName, "Show", "ComponentTypes", new { id = (Model as ComponentType).Id }, null)
                }
                else if (Model is EventType)
                {
                    @Html.ActionLink((Model as EventType).DisplayName, "Show", "EventTypes", new { id = (Model as EventType).Id }, null)
                }
                else if (Model is Event)
                {
                    @Html.ActionLink((Model as Event).Message ?? (Model as Event).Id.ToString(), "Show", "Events", new { id = (Model as Event).Id }, null)
                }
                else if (Model is User)
                {
                    @Html.ActionLink((Model as User).Login, "Show", "Users", new { id = (Model as User).Id }, null)
                }
                else if (Model is Subscription)
                {
                    @Html.ActionLink((Model as Subscription).Id.ToString(), "Edit", "Subscriptions", new { id = (Model as Subscription).Id }, null)
                }
                else if (Model is UnitTestType)
                {
                    @Html.ActionLink((Model as UnitTestType).DisplayName, "Show", "UnitTestTypes", new { id = (Model as UnitTestType).Id }, null)
                }
                else if (Model is EventImportance)
                {
                    @Html.EventImportanceLabel((EventImportance)Model)
                }
                else if (Model is MonitoringStatus)
                {
                    <span class="@GuiHelper.GetComponentStatusLabelCssClass((MonitoringStatus) Model)">@Model</span>
                }
                else if (Model is ObjectColor)
                {
                    <span class="label @GuiHelper.GetStrongBgColorCss(Model)">@Model</span>
                }
                else if (Model is MetricType)
                {
                    @Html.ActionLink((Model as MetricType).DisplayName, "Show", "MetricTypes", new { id = (Model as MetricType).Id }, null)
                }
                else if (Model is ColorStatusSelectorValue)
                {
                    var colors = (Model as ColorStatusSelectorValue).GetSelectedColors().Select(t => Zidium.UserAccount.Helpers.EnumHelper.EnumToString(t)).ToArray();
                    var colorsString = string.Join(", ", colors);
                    if (!string.IsNullOrEmpty(colorsString))
                    {
                        <span>@colorsString</span>
                    }
                    else
                    {
                        <span class="text-muted">не указан</span>
                    }
                }
                else
                {
                    @Model.ToString()
                }
            }
            else
            {
                <span class="text-muted">не задано</span>
            }
        </p>
    </div>
</div>
