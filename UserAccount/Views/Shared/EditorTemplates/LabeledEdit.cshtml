@using System.ComponentModel.DataAnnotations
@using Zidium.UserAccount.Helpers
@using Zidium.UserAccount.Models.Controls

@model dynamic

@{
    bool noGroup = ViewData.ContainsKey("NoGroup");
    bool horizontalForm = ViewData.ContainsKey("HorizontalForm") && (bool)ViewData["HorizontalForm"] == true;
    bool twoColumns = ViewData.ContainsKey("TwoColumns");
}

@if (!noGroup)
{
    @Html.Raw(@"<div class='" + (twoColumns ? "row" : "form-group") + "'>")
}

@Html.LabelFor(m => m, new { @class = horizontalForm ? (twoColumns ? "col-sm-4 control-label" : "col-sm-2 control-label") : string.Empty })

@{
    var metadata = ModelMetadata.FromLambdaExpression(m => m, ViewData);
    var type = metadata.ModelType;
    var basetype = Nullable.GetUnderlyingType(type);
    var colClass = horizontalForm ? (twoColumns ? "col-sm-8" : "col-sm-4") : string.Empty;
    if (type == typeof(TimeSpan) || basetype == typeof(TimeSpan) ||
        type == typeof(int) || basetype == typeof(int))
    {
        colClass += " col-fixed";
    }
}

<div class='@colClass'>
    @{
        var placeholder = ViewData.ModelMetadata.Description ?? ViewData.ModelMetadata.DisplayName;
        if (type.IsEnum || (basetype != null && basetype.IsEnum))
        {
            @Html.EnumSelector(m => m)
        }
        else if (type == typeof(TimeSpan) || basetype == typeof(TimeSpan))
        {
            @Html.TimeSpanSelector(m => m)
        }
        else if (ViewData.ModelMetadata.DataTypeName == "Component")
        {
            @Html.ComponentSelector(m => m, new ComponentSelectorOptions()
            {
                ShowAsList = false,
                ShowComponentStatusSelector = false
            })
        }
        else if (ViewData.ModelMetadata.DataTypeName == "ComponentTree")
        {
            @Html.ComponentSelector(m => m, new ComponentSelectorOptions()
            {
                ShowAsList = false,
                ShowComponentStatusSelector = false
            })
        }
        else if (ViewData.ModelMetadata.DataTypeName == "ComponentType")
        {
            @Html.ComponentTypeSelector(m => m)
        }
        else if (ViewData.ModelMetadata.DataTypeName == "EventType")
        {
            @Html.EventTypeSelector(UserHelper.CurrentUser.AccountId, m => m)
        }
        else if (ViewData.ModelMetadata.DataTypeName == "UnitTestType")
        {
            @Html.UnitTestTypeSelector(m => m, userOnly: true)
        }
        else if (ViewData.ModelMetadata.DataTypeName == "User")
        {
            @Html.UserSelector(m => m)
        }
        else if (ViewData.ModelMetadata.DataTypeName == "Date")
        {
            @Html.DateSelector(m => m)
        }
        else if (ViewData.ModelMetadata.DataTypeName == DataType.Password.ToString())
        {
            @Html.PasswordFor(m => m, new { @class = "form-control", placeholder = @placeholder })
        }
        else
        {
            if (ViewData.ModelMetadata.DataTypeName == "TextArea")
            {
                @Html.TextAreaFor(m => m, new { @class = "form-control", placeholder = @placeholder, rows = 3 })
            }
            else
            {
                @Html.TextBoxFor(m => m, new { @class = "form-control", placeholder = @placeholder })
            }
        }
    }
</div>
<div class='@(horizontalForm ? (twoColumns ? "col-sm-12" : "col-sm-6") : string.Empty)'>
    @Html.ValidationMessageFor(m => m, null, null, "p")
</div>

@if (!noGroup)
{
    @Html.Raw(@"</div>")
}