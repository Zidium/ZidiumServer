@using Zidium.UserAccount.Helpers
@using Zidium.UserAccount.Models
@using GridMvc.Html
@using GridMvc.Sorting
@model EventsListByStatusModel

@{
    ViewBag.Title = "События";
    ViewBag.ActiveMenuItems = "Events,ByStatus";
}

@section Styles
{
    @Styles.Render("~/Content/GridMvc")

    <style>
        [data-gridname = "main-grid"] > div > table.grid-table {
            table-layout: fixed;
        }
    </style>
}

@Html.Partial("_PageTitle")

<legend style="margin-bottom: 5px;">
    Причины статуса &mdash;
    @Html.ActionLink(Model.Component.DisplayName, "Show", "Components", new { id = Model.Component.Id }, null)
</legend> 

<div class="form-horizontal">
    <div class="row">
        <div class="col-sm-4">
            <div class="form-group">
                <label class="col-sm-3 control-label">
                    От
                </label>
                <div class="col-sm-9">
                    <p class="form-control-static">
                        @Model.StatusEvent.StartDate.ToString(GuiHelper.DateTimeDisplayFormat)
                    </p>
                </div>
            </div>
        </div>
        <div class="col-sm-4">
            <div class="form-group">
                <label class="col-sm-4 control-label">
                    До
                </label>
                <div class="col-sm-8">
                    <p class="form-control-static">
                        @Model.StatusEvent.EndDate.ToString(GuiHelper.DateTimeDisplayFormat)
                    </p>
                </div>
            </div>
        </div>
        <div class="col-sm-4">
            <div class="form-group">
                <label class="col-sm-4 control-label">
                    Время
                </label>
                <div class="col-sm-8">
                    <p class="form-control-static">
                        @GuiHelper.TimeSpanAsString(Model.StatusEvent.Duration)
                    </p>
                </div>
            </div>
        </div>
    </div>
    <div class="form-group">
        <label class="col-sm-1 control-label">
            Текст
        </label>
        <div class="col-sm-10">
            <p class="form-control-static text-wordbreak">
                @Model.StatusEvent.Message
            </p>
        </div>
    </div>
</div>

@Html.Grid(Model.Events).Columns(columns =>
{
    columns.Add().RenderValueAs(m => Html.EventImportanceIcon(m.Importance))
        .Encoded(false).Sanitized(false).Css("text-center").SetWidth(30);

    columns.Add(m => m.StartDate).Titled("Дата начала").RenderValueAs(m =>
        @<text>
            <a href='@Url.Action("Show", new {id = m.Id })' class='@GuiHelper.GetEventImportanceTextCssClass(m.Importance)'>
                <span>
                    @m.StartDate.ToString(GuiHelper.DateTimeDisplayFormat)
                </span>
            </a>
        </text>
    ).Encoded(false).Sanitized(false).SortInitialDirection(GridSortDirection.Descending)
    .Css("text-nowrap").SetWidth(150);

    columns.Add(m => m.EndDate).Titled("Дата окончания").RenderValueAs(m =>
        @<text>
            <span class='@GuiHelper.GetEventImportanceTextCssClass(m.Importance)'>
                @(m.EndDate.ToString(GuiHelper.DateTimeDisplayFormat))
            </span>
        </text>
    )
    .Encoded(false).Sanitized(false).Css("text-nowrap hide-on-mobile").SetWidth(150);
    
    columns.Add(m => m.Duration).Titled("Длительность").RenderValueAs(m => 
        @<text>
            <span class='@GuiHelper.GetEventImportanceTextCssClass(m.Importance)'>
                @(m.Duration != TimeSpan.Zero ? GuiHelper.TimeSpanAsString(m.Duration) : string.Empty)
            </span>
        </text>        )
    .Encoded(false).Sanitized(false).Css("text-nowrap hide-on-mobile").SetWidth(120);    

    columns.Add(m => m.Count).Titled("Кол-во").RenderValueAs(m =>
        @<text>
            <span class='@GuiHelper.GetEventImportanceTextCssClass(m.Importance)'>
                @m.Count.ToString()
            </span>
        </text>).Encoded(false).Sanitized(false).Css("hide-on-tablet").SetWidth(60);
    
    columns.Add(m => m.Source).Titled("Источник").RenderValueAs(m =>
        @<text>
            <span class='@GuiHelper.GetEventImportanceTextCssClass(m.Importance)'>
                @m.Source
            </span>
        </text>
    )
    .Encoded(false).Sanitized(false).Css("text-nowrap hide-on-mobile").SetWidth(150);

    columns.Add().Titled("Описание").RenderValueAs(t =>
        @<text>
             @{
                var description = t.Message;
                 if (string.IsNullOrEmpty(description))
                 {
                     description = Model.EventTypes[t.EventTypeId].DisplayName;
                 }
            }
             <span onclick="showEventProperties('@t.Id', this)" 
                   style="cursor:pointer;" 
                   class="@GuiHelper.GetEventImportanceTextCssClass(t.Importance)"
                   title="@description">
                @description
            </span>
        </text>
    ).Encoded(false).Sanitized(false).Css("text-wordbreak table-fixed").SetWidth("100%");

}).Sortable().WithMultipleFilters().Selectable(false).WithPaging(50).Named("main-grid")

@section Scripts
{
    @Scripts.Render("~/Scripts/GridMvc")
    @Scripts.Render("~/Scripts/AllControls")

    <script>
        showEventProperties = function (id, elem) {
            var divName = 'eventProperties_' + id;
            var messageTd = $(elem).parent();
            var messageTr = messageTd.parent();
            var propertiesRow = $('#' + divName, messageTr.parent());
            if (propertiesRow.length == 0) {
                var waitDiv = $(myGetPleaseWaitLoadingDiv());
                propertiesRow = $("<tr id='" + divName + "'></tr>").insertAfter(messageTr);
                var propertiesData = $("<td colspan=7></td>").append(waitDiv).appendTo(propertiesRow);
                var url = "/Events/GetEventRowProperties?id=" + id;
                propertiesData.load(url, function () {
                    waitDiv.remove();
                });
            } else {
                propertiesRow.remove();
            }
        }
    </script>
}
