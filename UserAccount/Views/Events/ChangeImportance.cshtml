@using Zidium.UserAccount.Helpers
@model Zidium.UserAccount.Models.Events.ChangeImportanceModel
@{
    ViewBag.Title = "Изменить важность события";
    Layout = "~/Views/Shared/_ModalDlgLayout.cshtml";
}

<div class="alert alert-warning">
    Данное правило будет применимо ко ВСЕМ событиям данного типа!
</div>

<div id="change-inportance-alert" class="alert alert-danger" style="display: none">
</div>

<form class="form-horizontal" method="POST">
    <div class="form-group">
        <div class="col-sm-12">
            <table style="width: 100%;">
                <tr>
                    <td colspan="2" style="font-weight: bold; padding-bottom: 5px; padding-top: 15px;">
                        Всем событиям
                    </td>
                </tr>
                <tr>
                    <td>
                        <input type="radio" name="versionType" onchange="onVersionTypeChanged()" value="any" @(Model.Version==null ? "checked" : "") /> с любой версией
                    </td>
                    <td>
                        <input type="radio" name="versionType" onchange="onVersionTypeChanged()" value="current" @(Model.Version != null ? "checked" : "") /> с версией
                        <div style="display: inline-block; vertical-align: middle">
                            @Html.TextBoxFor(x => x.Version, new { @class = "form-control", style = "width: 140px;" })
                        </div>
                        <span> и ниже</span>
                        <span class="ziTooltipContent">
                            Версия события - это версия компонента, который отправил событие. 
                            Версия компонента указывается в событиях при их отправке через API.
                        </span>
                    </td>
                </tr>
                <tr>
                    <td colspan="2" style="font-weight: bold; padding-bottom: 5px; padding-top: 15px;">
                        Устанавливать новую важность
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>

                            @Html.DropDownListFor(
                                x => x.Importance,
                                DropDownListHelper.GetEventImportances(Model.Importance, false),
                                new { @class = "form-control" })
                        </div>
                        @*<div class="col-sm-5">
                            Старое значение: @Model.Importance
                        </div>*@
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <hr/>
    <div class="form-group">
        <div class="col-sm-9 col-sm-offset-3 text-right">
            <a href="#" class="btn btn-primary" onclick="beginChangeImportance(this, event)">Применить</a>
            <button type="button" class="btn btn-default" data-dismiss="modal">Отмена</button>
        </div>
    </div>
</form>
<script>
    initTooltips();

    function onVersionTypeChanged() {
        var versionType = $("input[name=versionType]:checked").val();
        var versionBox = $("#Version");
        if (versionType == "any") {
            versionBox.prop("readonly", true);
        } else {
            versionBox.prop("readonly", false);
        }
    }

    function beginChangeImportance(elem, event) {
        event.preventDefault();
        var url = '@Url.Action("ChangeImportance")';
        var versionType = $("input[name=versionType]:checked").val();
        var version = null;
        if (versionType == "current") {
            version = $("#Version").val();
        }
        var importance = $("#Importance").val();
        var data = {
            eventId: '@Model.EventId',
            eventTypeId: '@Model.EventTypeId',
            version: version,
            importance: importance
        };
        var onSuccess = null;// чтобы перезагрузить страницу
        var onError = function(errorMessage) {
            var alert = $("#change-inportance-alert");
            alert.text(errorMessage);
            alert.show();
        };
        ziWaitAjaxRequest(elem, url, data, onSuccess, onError);
    }
</script>

    