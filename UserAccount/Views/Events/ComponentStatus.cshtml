@using Zidium.Core.Common.Helpers
@using Zidium.UserAccount.Helpers
@using Zidium.UserAccount.Models
@using GridMvc.Html
@using GridMvc.Sorting
@model EventsListByStatusModel

@{
    ViewBag.Title = "Статутс компонента";
    ViewBag.ActiveMenuItems = "Components";
}

@section Styles
{
    @Styles.Render("~/Content/GridMvc")

    <style>
        [data-gridname = "main-grid"] > div > table.grid-table {
            table-layout: fixed;
        }
        #topInfo b {
            color: #333;
            font-weight: bold;
        }
        .componentName {
            margin-left: 20px;
        }
        .details {
            margin-top: 20px;
            font-size: 14px;
            color: #333;
        }
    </style>
}

@Html.Partial("_PageTitle")

<div id="topInfo" style="color: gray;">
    <p class="zidiumHeader1">
        @Html.EventImportanceLabel(Model.StatusEvent.Importance) 
        @Html.ActionLink(Model.Component.DisplayName, "Show", "Components", new { id = Model.Component.Id }, new { @class = "componentName" })
    </p>
    <p class="details">
        Статус начался <b>@GuiHelper.GetDateTimeString(Model.StatusEvent.StartDate)</b>
        и закончился <b>@GuiHelper.GetDateTimeString(Model.StatusEvent.EndDate)</b> (длился @TimeSpanHelper.Get2UnitsString(Model.StatusEvent.Duration))
        <br/>
        Причиной статуса стали @Model.Events.Count() событий:
    </p>
</div>

@*<div id="links" class="btn-group">
    <a href="#" class="btn btn-default">Лог</a>
    <a href="#" class="btn btn-default">Все события</a>
    <a href="#" class="btn btn-default">Все статусы компонента</a>
</div>*@

@Html.Grid(Model.Events).Columns(columns =>
{
    columns.Add().RenderValueAs(m => Html.EventImportanceIcon(m.Importance))
        .Encoded(false).Sanitized(false).Css("text-center").SetWidth(30);

    columns.Add(m => m.StartDate).Titled("Дата начала").RenderValueAs(m =>
        @<text>
             <a href='@Url.Action("Show", new {id = m.Id })' class='@GuiHelper.GetEventImportanceTextCssClass(m.Importance)'>
                 <span>
                     @m.StartDate.ToString(GuiHelper.DateTimeDisplayFormat)
                 </span>
             </a>
         </text>
    ).Encoded(false).Sanitized(false).SortInitialDirection(GridSortDirection.Descending)
    .Css("text-nowrap").SetWidth(150);

    columns.Add(m => m.EndDate).Titled("Дата окончания").RenderValueAs(m =>
        @<text>
            <span class='@GuiHelper.GetEventImportanceTextCssClass(m.Importance)'>
                @(m.EndDate.ToString(GuiHelper.DateTimeDisplayFormat))
            </span>
        </text>
    )
    .Encoded(false).Sanitized(false).Css("text-nowrap hide-on-mobile").SetWidth(150);
    
    columns.Add(m => m.Duration).Titled("Длительность").RenderValueAs(m => 
        @<text>
            <span class='@GuiHelper.GetEventImportanceTextCssClass(m.Importance)'>
                @(m.Duration != TimeSpan.Zero ? TimeSpanHelper.Get2UnitsString(m.Duration) : string.Empty)
            </span>
        </text>        )
    .Encoded(false).Sanitized(false).Css("text-nowrap hide-on-mobile").SetWidth(120);    

    columns.Add(m => m.Count).Titled("Кол-во").RenderValueAs(m =>
        @<text>
            <span class='@GuiHelper.GetEventImportanceTextCssClass(m.Importance)'>
                @m.Count.ToString()
            </span>
        </text>).Encoded(false).Sanitized(false).Css("hide-on-tablet").SetWidth(60);
    
    columns.Add(m => m.Source).Titled("Источник").RenderValueAs(m =>
        @<text>
             @*@if (m.UnitTestId.HasValue)
             {
                 <a href='@Url.Action("ResultDetails", "UnitTests", new {id = m.UnitTestId})' class='@GuiHelper.GetEventImportanceTextCssClass(m.Importance)'>
                     <span>@m.Source</span>
                 </a>
             }
             else*@
             {
                 <span class='@GuiHelper.GetEventImportanceTextCssClass(m.Importance)'>
                     @m.Source
                 </span>
             }
         </text>
    )
    .Encoded(false).Sanitized(false).Css("text-nowrap hide-on-mobile table-fixed").SetWidth("30%");

    columns.Add().Titled("Описание").RenderValueAs(t =>
        @<text>
            @{
                var eventType = Model.EventTypes[t.EventTypeId];
                var description = (t.Message ?? eventType.DisplayName);
            }
             <span onclick="showEventProperties('@t.Id', this)" style="cursor:pointer;" 
                   class="@GuiHelper.GetEventImportanceTextCssClass(t.Importance)"
                   title="@description">
                @description
            </span>
        </text>
    ).Encoded(false).Sanitized(false).Css("text-wordbreak table-fixed").SetWidth("70%");
                                                                                  
}).Sortable().WithMultipleFilters().Selectable(false).WithPaging(50).Named("main-grid")

@section Scripts
{
    @Scripts.Render("~/Scripts/GridMvc")
    @Scripts.Render("~/Scripts/AllControls")

    <script>
        showEventProperties = function (id, elem) {
            var divName = 'eventProperties_' + id;
            var messageTd = $(elem).parent();
            var messageTr = messageTd.parent();
            var propertiesRow = $('#' + divName, messageTr.parent());
            if (propertiesRow.length == 0) {
                var waitDiv = $(myGetPleaseWaitLoadingDiv());
                propertiesRow = $("<tr id='" + divName + "'></tr>").insertAfter(messageTr);
                var propertiesData = $("<td colspan=7></td>").append(waitDiv).appendTo(propertiesRow);
                var url = "/Events/GetEventRowProperties?id=" + id;
                propertiesData.load(url, function () {
                    waitDiv.remove();
                });
            } else {
                propertiesRow.remove();
            }
        }
    </script>
}
