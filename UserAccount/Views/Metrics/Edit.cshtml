@using Zidium.UserAccount.Helpers
@model Zidium.UserAccount.Models.Metrics.EditModel

<style>
    .smart-col-labels {
        min-width: 200px;
    }

    #ModalDlgBody {
        padding-bottom: 0px;
    }
</style>

@{
    ViewBag.Title = Model.Id.HasValue ? "Настройка метрики" : "Добавление метрики";
    ViewBag.ActiveMenuItems = "Metrics";
    var metricTypesItems = DropDownListHelper.GetMetricTypes(Model.MetricTypeId, true);
    var hasMetricTypes = metricTypesItems.Count > 1;
}

<p class="submenu-title">@ViewBag.Title</p>
@if (Model.Metric != null)
{
    <div class="zi-bread-crumbs">
        @Html.Partial("~/Views/Controls/MetricBreadCrumbs.cshtml", Model.Metric)
    </div>
}
<hr class="submenu" />

@if (!hasMetricTypes)
{
    <div class="alert alert-warning">
        Чтобы создать метрику необходимо указать ее тип. Сейчас в системе нет ни одного типа метрики. 
        Создайте сначала тип метрики.
        @Html.ActionLink("Создать", "Edit", "MetricTypes", null, new{@class="btn btn-warning"})
    </div>
}

@{Html.BeginForm();}

@Html.AntiForgeryToken()
@Html.HiddenFor(model => model.Id)

<div class="smart-container">
    
    @Html.EditorFor(m => m.ComponentId, "SmartEdit")
    @if (Model.Id == null)
    {
        <div class="smart-row">
            <div class="smart-col-labels">
                @Html.LabelFor(x => x.MetricTypeId, new {@class = "control-label"})
            </div>
            <div class="smart-col-fields">
                <div class="smart-subcol">
                    @Html.DropDownListFor(x => x.MetricTypeId, metricTypesItems, new {@class = "form-control"})
                </div>
                <div>
                    @Html.ValidationMessageFor(x => x.MetricTypeId, null, null, "p")
                </div>
            </div>
        </div>
    }
    else
    {
        <text>
            @Html.HiddenFor(x => x.MetricTypeId) 
            @Html.DisplayFor(x => x.MetricType, "SmartDisplay")
        </text>
    }
    <div class="smart-row">
        <div class="smart-col-labels smart-col-empty"></div>
        <div class="smart-col-fields">
            <p class="form-control-static">
                <strong>Настройки обработки</strong>
            </p>
        </div>
    </div>
    
    @Html.EditorFor(x => x.ActualTime, "SmartEdit")
    @Html.EditorFor(x => x.NoSignalColor, "SmartEdit")
    
    <div class="smart-row">
        <div class="smart-col-labels smart-col-empty"></div>
        <div class="smart-col-fields">
            <p class="form-control-static">
                <strong>Правила для цветов</strong>
            </p>
        </div>
    </div>

    @Html.EditorFor(m => m.ConditionRed, "SmartEdit")
    @Html.EditorFor(m => m.ConditionYellow, "SmartEdit")
    @Html.EditorFor(m => m.ConditionGreen, "SmartEdit")
    @Html.EditorFor(m => m.ElseColor, "SmartEdit")

    <div class="smart-row">
        <div class="smart-col-labels smart-col-empty"></div>
        <div class="smart-col-fields" style="text-align: left">
            <div>
                <input type="submit" value='@(Model.Id.HasValue ? "Сохранить" : "Добавить")' class="btn btn-primary smart-button" />
            </div>
        </div>
    </div>
</div>

@{Html.EndForm();}

@section Scripts
{
    @Scripts.Render("~/Scripts/AllControls")
}
