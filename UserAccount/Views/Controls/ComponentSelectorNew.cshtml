@using Zidium.Core.Api
@using Zidium.UserAccount.Helpers
@using Zidium.UserAccount.Models
@using Zidium.UserAccount.Models.Components
@model ComponentSelectorModel

@{
    var captionName = Model.Name + "_Caption";
    var textBoxName = Model.Name + "_Text";
    var containerName = Model.Name + "_Container";
    var divName = Model.Name + "_Div";
    var typeSelectorSize = Model.ShowComponentStatusSelector ? 6 : 12;
    var statusSelectorSize = Model.ShowComponentTypeSelector ? 6 : 12;
    var componentFullName = Model.GetComponentFullName();
}

<div class="dropdown full-width" id="@containerName">

    @if (Model.ShowCreateNewButton || Model.ShowFindButton)
    {
        <div class="input-group full-width">
            <div style="display: table-cell; max-width: 1px;">
                <span id="@captionName"
                      style="cursor: text; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; text-align: left; direction: rtl; border-top-left-radius: 4px; border-bottom-left-radius: 4px;"
                      class="form-control" title="@componentFullName">@(componentFullName ?? "Выберите компонент")</span>
                </div>
                <span class="input-group-btn">
                    @if (Model.ShowCreateNewButton)
                    {
                        <button class="btn btn-default" type="button" onclick="showCreateNewComponentDialog()">Создать новый</button>
                    }
                    @if (Model.ShowFindButton)
                    {
                        <button id="findComponentButton" class="btn btn-default" type="button">Выбрать</button>
                    }
                </span>
            </div>
        }
        else
        {
            <div class="input-group full-width">
                <div style="display: table-cell; max-width: 1px;">
                    <span id="@captionName"
                          style="cursor: text; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; text-align: left; direction: rtl; border-top-left-radius: 4px; border-bottom-left-radius: 4px;"
                          class="form-control" title="@componentFullName">@(componentFullName ?? "Выберите компонент")</span>
                    </div>
                    <div class="input-group-btn">
                        <button id="clearComponentButton" class="btn btn-default" type="button" @(!Model.AllowEmpty ? "disabled" : null)>
                            <span class="glyphicon glyphicon-remove text-muted"></span>
                        </button>
                    </div>
                </div>
            }

    @if (Model.Expression == null)
    {
        @Html.Hidden(Model.Name, null, new { id = Model.Name, data_filter = !Model.HideWhenFilter ? "true" : "false", data_toggle = "dropdown", data_expression = "false" })
    }
    else
    {
        @Model.HtmlHelper.HiddenFor(Model.Expression, new { id = Model.Name, data_filter = !Model.HideWhenFilter ? "true" : "false", data_toggle = "dropdown", data_expression = "true" })
    }

    <div class="dropdown-menu" id="@divName" style="width: 100%; padding: 0; margin: 0; padding-top: 5px; margin-top: 5px;">
        <div class="clearfix">
            <div class="col-xs-@typeSelectorSize" style="margin-bottom: 10px;">
                <input type="text" name="@textBoxName" id="@textBoxName" class="form-control" autocomplete="off" placeholder="Поиск...">
            </div>
            @if (Model.ShowComponentTypeSelector)
            {
                <div class="col-xs-@typeSelectorSize" style="margin-bottom: 10px;">
                    @Html.Label("Тип")
                    @Html.ComponentTypeSelector(Model.Name + "_componentTypeId", null, true, false, true)
                </div>
            }
            @if (Model.ShowComponentStatusSelector)
            {
                <div class="col-xs-@statusSelectorSize" style="margin-bottom: 10px;">
                    @Html.Label("Статус")
                    @Html.ComponentStatusSelector(Model.Name + "_status", new MonitoringStatus[0], false, true)
                </div>
            }
        </div>

        <div id="loading" style="display: none;" class="clearfix">
            <div class="col-sm-12" style="margin-bottom: 10px; margin-top: 10px;">
                <img src="/Content/Icons/ajax-loader.gif" style="margin-right: 10px;" />
                <span>Обновление...</span>
            </div>
        </div>

        @{
            var url = Model.ShowAsList ? Url.Action("GetComponentsMiniList", "Components") :
                Url.Action("GetComponentsMiniTree", "ComponentTree");
        }

        <div class="clearfix">
            <div class="col-sm-12">
                <div id="components" class='@(Model.ShowAsList ? string.Empty : "css-treeview")'
                     data-url='@url'
                     style="overflow: auto; margin-top: 5px; max-height: 300px; display: none;">
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    function setNewComponentData(componentId, componentName) {
        $("#@captionName").val(componentName);
        $("#@Model.Name").val(componentId);
        HideModal();
    }

    function showCreateNewComponentDialog() {
        var url = '@Html.Raw(Url.Action(
            "CreateNewInFolder",
            "Components",
            new CreateNewInFolderModel()
                  {
                      ComponentTypeId = Model.CreateNewDialogDefualtComponentTypeId,
                      FolderSystemName = Model.NewComponentFolderSystemName,
                      FolderDisplayName = Model.NewComponentFolderDisplayName
                  }))';
        UrlShowModal(url);
        return false;
    }

    $(function () {
        var hidden = $('#@Model.Name');
        var textBox = $('#@textBoxName');
        var caption = $('#@captionName');
        var div = $('#@divName');
        var value = '@(Model.ComponentId.HasValue ? Model.ComponentId.Value.ToString() : string.Empty)';
        if (value.length === 0)
            value = null;
        var allowEmpty = '@Model.AllowEmpty.ToString()' === 'True';
        var callback = function () {
            if ('@Model.AutoRefreshPage.ToString()' === 'True') {
                document.location.href = SetQueryParamFromControl(document.location.href, hidden);
            }
        };
        var selector = new ComponentSelectorNew(hidden, textBox, caption, div, value, '@Html.Raw(HttpUtility.JavaScriptStringEncode(Model.GetComponentFullName()))', callback, allowEmpty, '@Model.Name');
        @if (Model.ExternalComponentTypeSelectId != null)
        {
        <text>
        selector.externalComponentTypeSelectId = '@Model.ExternalComponentTypeSelectId';
        </text>
        }
        @if (Model.ShowFindButton)
        {
        <text>
        $("#@containerName #findComponentButton").click(function (event) {
            event.preventDefault();
            selector.Selector.Open();
        });
        </text>
        }

        $('#clearComponentButton', '#@containerName').click(function () {
            selector.Clear();
        });
    });
</script>
