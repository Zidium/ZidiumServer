// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Zidium.Storage.Ef;

namespace Zidium.Storage.Ef.PostgreSql.Migrations
{
    [DbContext(typeof(PostgreSqlAccountDbContext))]
    partial class PostgreSqlAccountDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Zidium.Storage.Ef.DbAccountSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("AccountSettings");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbArchivedStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("ArchivedStatuses");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbBulb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActualDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventCategory")
                        .HasColumnType("integer");

                    b.Property<Guid?>("FirstEventId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasSignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastChildBulbId")
                        .HasColumnType("uuid")
                        .HasColumnName("LastChildStatusDataId");

                    b.Property<Guid?>("LastEventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.Property<Guid?>("MetricId")
                        .HasColumnType("uuid");

                    b.Property<int>("PreviousStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("StatusEventId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UnitTestId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpTimeLengthMs")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpTimeStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UpTimeSuccessMs")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ComponentId");

                    b.HasIndex("MetricId");

                    b.HasIndex("UnitTestId");

                    b.ToTable("Bulbs");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChildComponentsStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisableComment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("DisableToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EventsStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExternalStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InternalStatusId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MetricsStatusId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ParentEnable")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UnitTestsStatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Version")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ChildComponentsStatusId");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("EventsStatusId");

                    b.HasIndex("ExternalStatusId");

                    b.HasIndex("InternalStatusId");

                    b.HasIndex("MetricsStatusId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SystemName");

                    b.HasIndex("UnitTestsStatusId");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbComponentProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Value")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ComponentId");

                    b.ToTable("ComponentProperties");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbComponentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SystemName");

                    b.ToTable("ComponentTypes");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbDefect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EventTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastChangeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ResponsibleUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EventTypeId");

                    b.HasIndex("LastChangeId");

                    b.HasIndex("ResponsibleUserId");

                    b.ToTable("Defects");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbDefectChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DefectId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("DefectId");

                    b.HasIndex("UserId");

                    b.ToTable("DefectChanges");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActualDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FirstReasonEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("FirstReasonEventId");

                    b.Property<int>("Importance")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSpace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUserHandled")
                        .HasColumnType("boolean");

                    b.Property<long>("JoinKeyHash")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastNotificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastStatusEventId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Message")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("PreviousImportance")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Version")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("VersionLong")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EventTypeId");

                    b.HasIndex("LastStatusEventId");

                    b.HasIndex(new[] { "Category", "ActualDate" }, "IX_ForDeletion");

                    b.HasIndex(new[] { "OwnerId", "EventTypeId", "Importance" }, "IX_ForJoin");

                    b.HasIndex(new[] { "OwnerId", "Category", "StartDate" }, "IX_OwnerBased");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbEventProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EventId");

                    b.ToTable("EventParameters");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbEventStatus", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.HasKey("EventId", "StatusId");

                    b.HasIndex("EventId");

                    b.HasIndex("StatusId");

                    b.ToTable("EventStatuses");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbEventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DefectId")
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ImportanceForNew")
                        .HasColumnType("integer");

                    b.Property<int?>("ImportanceForOld")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<int?>("JoinIntervalSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("OldVersion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("DefectId");

                    b.HasIndex("SystemName");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbHttpRequestUnitTest", b =>
                {
                    b.Property<Guid>("UnitTestId")
                        .HasColumnType("uuid");

                    b.HasKey("UnitTestId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("HttpRequestUnitTests");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbHttpRequestUnitTestRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ErrorHtml")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("HttpRequestUnitTestId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("LastRunDurationMs")
                        .HasColumnType("integer");

                    b.Property<int?>("LastRunErrorCode")
                        .HasColumnType("integer");

                    b.Property<string>("LastRunErrorMessage")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastRunTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MaxResponseSize")
                        .HasColumnType("integer");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<int?>("ResponseCode")
                        .HasColumnType("integer");

                    b.Property<int>("SortNumber")
                        .HasColumnType("integer");

                    b.Property<string>("SuccessHtml")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("TimeoutSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("HttpRequestUnitTestId");

                    b.ToTable("HttpRequestUnitTestRules");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbHttpRequestUnitTestRuleData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("RuleId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RuleId");

                    b.ToTable("HttpRequestUnitTestRuleDatas");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbLastComponentNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int>("EventImportance")
                        .HasColumnType("integer");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ComponentId");

                    b.HasIndex("EventId");

                    b.HasIndex("NotificationId");

                    b.ToTable("LastComponentNotifications");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbLimitData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventsRequests")
                        .HasColumnType("integer");

                    b.Property<long>("EventsSize")
                        .HasColumnType("bigint");

                    b.Property<long>("LogSize")
                        .HasColumnType("bigint");

                    b.Property<int>("MetricsRequests")
                        .HasColumnType("integer");

                    b.Property<long>("MetricsSize")
                        .HasColumnType("bigint");

                    b.Property<int>("SmsCount")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UnitTestsRequests")
                        .HasColumnType("integer");

                    b.Property<long>("UnitTestsSize")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex(new[] { "Type", "BeginDate" }, "IX_AccountId");

                    b.ToTable("LimitDatas");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbLimitDataForUnitTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LimitDataId")
                        .HasColumnType("uuid");

                    b.Property<int>("ResultsCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("UnitTestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("LimitDataId");

                    b.HasIndex("UnitTestId");

                    b.ToTable("LimitDatasForUnitTests");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Context")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("ParametersCount")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex(new[] { "ComponentId", "Date", "Order", "Level", "Context" }, "IX_ComponentBased");

                    b.HasIndex(new[] { "Date" }, "IX_Date");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbLogConfig", b =>
                {
                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDebugEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsErrorEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFatalEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInfoEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTraceEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWarningEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ComponentId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LogConfigs");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbLogProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<Guid>("LogId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("LogId");

                    b.ToTable("LogParameters");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActualDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ActualTimeSecs")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConditionAlarm")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("ConditionElseColor")
                        .HasColumnType("integer");

                    b.Property<string>("ConditionSuccess")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ConditionWarning")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisableComment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("DisableToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MetricTypeId")
                        .HasColumnType("uuid");

                    b.Property<int?>("NoSignalColor")
                        .HasColumnType("integer");

                    b.Property<bool>("ParentEnable")
                        .HasColumnType("boolean");

                    b.Property<Guid>("StatusDataId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ComponentId");

                    b.HasIndex("MetricTypeId");

                    b.HasIndex("StatusDataId");

                    b.ToTable("Metrics");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbMetricHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActualDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Color")
                        .HasColumnType("integer");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasSignal")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MetricTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StatusEventId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("BeginDate");

                    b.HasIndex("MetricTypeId");

                    b.HasIndex("StatusEventId");

                    b.HasIndex(new[] { "ComponentId", "MetricTypeId", "BeginDate" }, "IX_ForHistory");

                    b.ToTable("MetricHistory");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbMetricType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ActualTimeSecs")
                        .HasColumnType("integer");

                    b.Property<string>("ConditionAlarm")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("ConditionElseColor")
                        .HasColumnType("integer");

                    b.Property<string>("ConditionSuccess")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ConditionWarning")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("NoSignalColor")
                        .HasColumnType("integer");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("MetricTypes");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int>("Reason")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("SendEmailCommandId")
                        .HasColumnType("uuid");

                    b.Property<string>("SendError")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Guid?>("SendMessageCommandId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EventId");

                    b.HasIndex("SendEmailCommandId");

                    b.HasIndex("SendMessageCommandId");

                    b.HasIndex("Status");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbNotificationHttp", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Json")
                        .HasColumnType("text");

                    b.HasKey("NotificationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("NotificationsHttp");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("character(50)")
                        .IsFixedLength(true);

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbSendEmailCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("From")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsHtml")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex(new[] { "Status" }, "IX_ForSend");

                    b.ToTable("SendEmailCommand");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbSendMessageCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Channel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex(new[] { "Channel", "Status" }, "IX_ForSend")
                        .HasDatabaseName("IX_ForSend1");

                    b.ToTable("SendMessageCommand");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbSendSmsCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex(new[] { "Status" }, "IX_ForSend")
                        .HasDatabaseName("IX_ForSend2");

                    b.ToTable("SendSmsCommand");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Channel")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ComponentTypeId")
                        .HasColumnType("uuid");

                    b.Property<int?>("DurationMinimumInSeconds")
                        .HasColumnType("integer");

                    b.Property<int>("Importance")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("NotifyBetterStatus")
                        .HasColumnType("boolean");

                    b.Property<int>("Object")
                        .HasColumnType("integer");

                    b.Property<int?>("ResendTimeInSeconds")
                        .HasColumnType("integer");

                    b.Property<int?>("SendIntervalFromHour")
                        .HasColumnType("integer");

                    b.Property<int?>("SendIntervalFromMinute")
                        .HasColumnType("integer");

                    b.Property<int?>("SendIntervalToHour")
                        .HasColumnType("integer");

                    b.Property<int?>("SendIntervalToMinute")
                        .HasColumnType("integer");

                    b.Property<bool>("SendOnlyInInterval")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ComponentId");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbTimeZone", b =>
                {
                    b.Property<int>("OffsetMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("OffsetMinutes")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("TimeZones");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<int>("Purpose")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ActualTimeSecs")
                        .HasColumnType("integer");

                    b.Property<int>("AttempCount")
                        .HasColumnType("integer");

                    b.Property<int>("AttempMax")
                        .HasColumnType("integer");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisableComment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("DisableToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<int?>("ErrorColor")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastExecutionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("NextExecutionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("NextStepProcessDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("NoSignalColor")
                        .HasColumnType("integer");

                    b.Property<bool>("ParentEnable")
                        .HasColumnType("boolean");

                    b.Property<int?>("PeriodSeconds")
                        .HasColumnType("integer");

                    b.Property<bool>("SimpleMode")
                        .HasColumnType("boolean");

                    b.Property<Guid>("StatusDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ComponentId");

                    b.HasIndex("StatusDataId");

                    b.HasIndex("TypeId");

                    b.ToTable("UnitTests");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTestDomainNamePaymentPeriodRule", b =>
                {
                    b.Property<Guid>("UnitTestId")
                        .HasColumnType("uuid");

                    b.Property<int>("AlarmDaysCount")
                        .HasColumnType("integer");

                    b.Property<string>("Domain")
                        .HasColumnType("text");

                    b.Property<int?>("LastRunErrorCode")
                        .HasColumnType("integer");

                    b.Property<int>("WarningDaysCount")
                        .HasColumnType("integer");

                    b.HasKey("UnitTestId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("UnitTestDomainNamePaymentPeriodRules");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTestPingRule", b =>
                {
                    b.Property<Guid>("UnitTestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Host")
                        .HasColumnType("text");

                    b.Property<int?>("LastRunErrorCode")
                        .HasColumnType("integer");

                    b.Property<int>("TimeoutMs")
                        .HasColumnType("integer");

                    b.HasKey("UnitTestId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("UnitTestPingRules");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTestProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UnitTestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("UnitTestId");

                    b.ToTable("UnitTestProperties");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTestSqlRule", b =>
                {
                    b.Property<Guid>("UnitTestId")
                        .HasColumnType("uuid");

                    b.Property<int>("CommandTimeoutMs")
                        .HasColumnType("integer");

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("OpenConnectionTimeoutMs")
                        .HasColumnType("integer");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("Query")
                        .HasColumnType("text");

                    b.HasKey("UnitTestId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("UnitTestSqlRules");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTestSslCertificateExpirationDateRule", b =>
                {
                    b.Property<Guid>("UnitTestId")
                        .HasColumnType("uuid");

                    b.Property<int>("AlarmDaysCount")
                        .HasColumnType("integer");

                    b.Property<int?>("LastRunErrorCode")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("WarningDaysCount")
                        .HasColumnType("integer");

                    b.HasKey("UnitTestId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("UnitTestSslCertificateExpirationDateRules");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTestTcpPortRule", b =>
                {
                    b.Property<Guid>("UnitTestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Host")
                        .HasColumnType("text");

                    b.Property<int?>("LastRunErrorCode")
                        .HasColumnType("integer");

                    b.Property<bool>("Opened")
                        .HasColumnType("boolean");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<int>("TimeoutMs")
                        .HasColumnType("integer");

                    b.HasKey("UnitTestId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("UnitTestTcpPortRules");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTestType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ActualTimeSecs")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<int?>("NoSignalColor")
                        .HasColumnType("integer");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SystemName");

                    b.ToTable("UnitTestTypes");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTestVirusTotalRule", b =>
                {
                    b.Property<Guid>("UnitTestId")
                        .HasColumnType("uuid");

                    b.Property<int?>("LastRunErrorCode")
                        .HasColumnType("integer");

                    b.Property<int>("NextStep")
                        .HasColumnType("integer");

                    b.Property<string>("ScanId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ScanTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("UnitTestId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("UnitTestVirusTotalRules");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EMail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("InArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Login");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUserContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("UserId");

                    b.ToTable("UserContacts");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUserSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbArchivedStatus", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbEvent", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbBulb", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("Zidium.Storage.Ef.DbMetric", "Metric")
                        .WithMany()
                        .HasForeignKey("MetricId");

                    b.HasOne("Zidium.Storage.Ef.DbUnitTest", "UnitTest")
                        .WithMany()
                        .HasForeignKey("UnitTestId");

                    b.Navigation("Component");

                    b.Navigation("Metric");

                    b.Navigation("UnitTest");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbComponent", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbBulb", "ChildComponentsStatus")
                        .WithMany()
                        .HasForeignKey("ChildComponentsStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbComponentType", "ComponentType")
                        .WithMany("Components")
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbBulb", "EventsStatus")
                        .WithMany()
                        .HasForeignKey("EventsStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbBulb", "ExternalStatus")
                        .WithMany()
                        .HasForeignKey("ExternalStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbBulb", "InternalStatus")
                        .WithMany()
                        .HasForeignKey("InternalStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbBulb", "MetricsStatus")
                        .WithMany()
                        .HasForeignKey("MetricsStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbComponent", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.HasOne("Zidium.Storage.Ef.DbBulb", "UnitTestsStatus")
                        .WithMany()
                        .HasForeignKey("UnitTestsStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChildComponentsStatus");

                    b.Navigation("ComponentType");

                    b.Navigation("EventsStatus");

                    b.Navigation("ExternalStatus");

                    b.Navigation("InternalStatus");

                    b.Navigation("MetricsStatus");

                    b.Navigation("Parent");

                    b.Navigation("UnitTestsStatus");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbComponentProperty", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbComponent", "Component")
                        .WithMany("Properties")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbDefect", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbEventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId");

                    b.HasOne("Zidium.Storage.Ef.DbDefectChange", "LastChange")
                        .WithMany()
                        .HasForeignKey("LastChangeId");

                    b.HasOne("Zidium.Storage.Ef.DbUser", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserId");

                    b.Navigation("EventType");

                    b.Navigation("LastChange");

                    b.Navigation("ResponsibleUser");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbDefectChange", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbDefect", "Defect")
                        .WithMany("Changes")
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Defect");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbEvent", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbEventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbEvent", "LastStatusEvent")
                        .WithMany()
                        .HasForeignKey("LastStatusEventId");

                    b.Navigation("EventType");

                    b.Navigation("LastStatusEvent");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbEventProperty", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbEvent", "Event")
                        .WithMany("Properties")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbEventStatus", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbEvent", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbEvent", "StatusEvent")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("StatusEvent");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbEventType", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbDefect", "Defect")
                        .WithMany()
                        .HasForeignKey("DefectId");

                    b.Navigation("Defect");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbHttpRequestUnitTest", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbUnitTest", "UnitTest")
                        .WithOne("HttpRequestUnitTest")
                        .HasForeignKey("Zidium.Storage.Ef.DbHttpRequestUnitTest", "UnitTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UnitTest");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbHttpRequestUnitTestRule", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbHttpRequestUnitTest", "HttpRequestUnitTest")
                        .WithMany("Rules")
                        .HasForeignKey("HttpRequestUnitTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HttpRequestUnitTest");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbHttpRequestUnitTestRuleData", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbHttpRequestUnitTestRule", "Rule")
                        .WithMany("Datas")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbLastComponentNotification", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbComponent", "Component")
                        .WithMany("LastNotifications")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbEvent", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbNotification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Event");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbLimitDataForUnitTest", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbLimitData", "LimitData")
                        .WithMany("UnitTestData")
                        .HasForeignKey("LimitDataId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbUnitTest", "UnitTest")
                        .WithMany()
                        .HasForeignKey("UnitTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LimitData");

                    b.Navigation("UnitTest");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbLog", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbLogConfig", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbComponent", "Component")
                        .WithOne("LogConfig")
                        .HasForeignKey("Zidium.Storage.Ef.DbLogConfig", "ComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbLogProperty", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbLog", "Log")
                        .WithMany("Parameters")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Log");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbMetric", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbComponent", "Component")
                        .WithMany("Metrics")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbMetricType", "MetricType")
                        .WithMany()
                        .HasForeignKey("MetricTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbBulb", "Bulb")
                        .WithMany()
                        .HasForeignKey("StatusDataId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bulb");

                    b.Navigation("Component");

                    b.Navigation("MetricType");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbMetricHistory", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbMetricType", "MetricType")
                        .WithMany()
                        .HasForeignKey("MetricTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbEvent", "StatusEvent")
                        .WithMany()
                        .HasForeignKey("StatusEventId");

                    b.Navigation("Component");

                    b.Navigation("MetricType");

                    b.Navigation("StatusEvent");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbNotification", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbEvent", "Event")
                        .WithMany("Notifications")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbSendEmailCommand", "SendEmailCommand")
                        .WithMany()
                        .HasForeignKey("SendEmailCommandId");

                    b.HasOne("Zidium.Storage.Ef.DbSendMessageCommand", "SendMessageCommand")
                        .WithMany()
                        .HasForeignKey("SendMessageCommandId");

                    b.HasOne("Zidium.Storage.Ef.DbSubscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId");

                    b.HasOne("Zidium.Storage.Ef.DbUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("SendEmailCommand");

                    b.Navigation("SendMessageCommand");

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbNotificationHttp", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbNotification", "Notification")
                        .WithOne("NotificationHttp")
                        .HasForeignKey("Zidium.Storage.Ef.DbNotificationHttp", "NotificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbSubscription", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("Zidium.Storage.Ef.DbComponentType", "ComponentType")
                        .WithMany()
                        .HasForeignKey("ComponentTypeId");

                    b.HasOne("Zidium.Storage.Ef.DbUser", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("ComponentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbToken", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTest", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbComponent", "Component")
                        .WithMany("UnitTests")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbBulb", "Bulb")
                        .WithMany()
                        .HasForeignKey("StatusDataId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbUnitTestType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bulb");

                    b.Navigation("Component");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTestDomainNamePaymentPeriodRule", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbUnitTest", "UnitTest")
                        .WithOne("DomainNamePaymentPeriodRule")
                        .HasForeignKey("Zidium.Storage.Ef.DbUnitTestDomainNamePaymentPeriodRule", "UnitTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UnitTest");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTestPingRule", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbUnitTest", "UnitTest")
                        .WithOne("PingRule")
                        .HasForeignKey("Zidium.Storage.Ef.DbUnitTestPingRule", "UnitTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UnitTest");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTestProperty", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbUnitTest", "UnitTest")
                        .WithMany("Properties")
                        .HasForeignKey("UnitTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UnitTest");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTestSqlRule", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbUnitTest", "UnitTest")
                        .WithOne("SqlRule")
                        .HasForeignKey("Zidium.Storage.Ef.DbUnitTestSqlRule", "UnitTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UnitTest");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTestSslCertificateExpirationDateRule", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbUnitTest", "UnitTest")
                        .WithOne("SslCertificateExpirationDateRule")
                        .HasForeignKey("Zidium.Storage.Ef.DbUnitTestSslCertificateExpirationDateRule", "UnitTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UnitTest");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTestTcpPortRule", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbUnitTest", "UnitTest")
                        .WithOne("TcpPortRule")
                        .HasForeignKey("Zidium.Storage.Ef.DbUnitTestTcpPortRule", "UnitTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UnitTest");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTestVirusTotalRule", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbUnitTest", "UnitTest")
                        .WithOne("VirusTotalRule")
                        .HasForeignKey("Zidium.Storage.Ef.DbUnitTestVirusTotalRule", "UnitTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UnitTest");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUserContact", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbUser", "User")
                        .WithMany("UserContacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUserRole", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Zidium.Storage.Ef.DbUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUserSetting", b =>
                {
                    b.HasOne("Zidium.Storage.Ef.DbUser", "User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbComponent", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("LastNotifications");

                    b.Navigation("LogConfig");

                    b.Navigation("Metrics");

                    b.Navigation("Properties");

                    b.Navigation("UnitTests");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbComponentType", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbDefect", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbEvent", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbHttpRequestUnitTest", b =>
                {
                    b.Navigation("Rules");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbHttpRequestUnitTestRule", b =>
                {
                    b.Navigation("Datas");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbLimitData", b =>
                {
                    b.Navigation("UnitTestData");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbLog", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbNotification", b =>
                {
                    b.Navigation("NotificationHttp");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUnitTest", b =>
                {
                    b.Navigation("DomainNamePaymentPeriodRule");

                    b.Navigation("HttpRequestUnitTest");

                    b.Navigation("PingRule");

                    b.Navigation("Properties");

                    b.Navigation("SqlRule");

                    b.Navigation("SslCertificateExpirationDateRule");

                    b.Navigation("TcpPortRule");

                    b.Navigation("VirusTotalRule");
                });

            modelBuilder.Entity("Zidium.Storage.Ef.DbUser", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Settings");

                    b.Navigation("Subscriptions");

                    b.Navigation("UserContacts");
                });
#pragma warning restore 612, 618
        }
    }
}
