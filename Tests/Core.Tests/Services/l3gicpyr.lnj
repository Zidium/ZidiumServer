using System;
using NUnit.Framework;
using System.Collections.Generic;
using AppMonitoring.Core.ConfigDb;
using AppMonitoring.Core.AccountsDb;
using AppMonitoring.Core.StorageDb;
using AppMonitoring.Core.Notifications;
using AppMonitoring.Tests;

namespace AppMonitoring.Core.Notifications
{
    [TestFixture]
    class NotificationTests
    {
        [Test]
        public void SendAllNotificationsTest()
        {
            var context = new ConfigDbContext();
            var processor = new NotificationsProcessor(context);
            processor.ProcessAll();
        }

        [Test]
        public void SendEmailNotifications()
        {
            var accountInfo = TestHelper.GetTestAccount();
            using (var context = new ConfigDbContext())
            {
                Notification notification; 
                var accountDatabase = TestHelper.GetTestAccountDatabase();
                var storageDatabase = TestHelper.GetTestComponentDatabase();
                // Создадим уведомление
                using (var storageContext = new StorageDbContext(storageDatabase.ConnectionString))
                {
                    IEventRepository eventRepository = new EventRepository(storageContext, accountInfo.Id);
                    var parameters = new List<EventParameter>();
                    parameters.Add(new EventParameter(Api.UserActionParameters.SystemName.Id, "EMailNotofocationsTest"));
                    parameters.Add(new EventParameter(Api.UserActionParameters.Comment.Id, "Проверка уведомлений по EMail"));
                    var _event = eventRepository.CreateOrJoinEvent(TestHelper.GetTestEventType(), TestHelper.GetTestComponent().Id, Api.ImportanceLevel.Debug,
                        0, DateTime.Now, null, parameters);
                    INotificationRepository notificationRepository = new NotificationRepository(storageContext);
                    notification = notificationRepository.Add(_event.Id, TestHelper.GetTestEMailSubscription());
                    using (var sender = new NotificationsEMailSender(context, "smtp.mail.ru", "appmonitoring@mail.ru", "APPfKi39OVIwyrKD8uZu"))
                    {
                        sender.SendForAccountsDatabaseId(accountDatabase.Id);
                    };
                };

                // Проверим, что стало с уведомлением
                using (var storageContext = new StorageDbContext(storageDatabase.ConnectionString))
                {
                    INotificationRepository notificationRepository = new NotificationRepository(storageContext);
                    notification = notificationRepository.GetById(notification.Id);
                    Assert.AreEqual(NotificationStatus.Sended, notification.Status);
                }

            }

        }

    }
}
